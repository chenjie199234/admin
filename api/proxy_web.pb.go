// Code generated by protoc-gen-go-web. DO NOT EDIT.
// version:
// 	protoc-gen-go-web v0.0.77<br />
// 	protoc            v3.21.11<br />
// source: api/proxy.proto<br />

package api

import (
	context "context"
	cerror "github.com/chenjie199234/Corelib/cerror"
	log "github.com/chenjie199234/Corelib/log"
	metadata "github.com/chenjie199234/Corelib/metadata"
	pool "github.com/chenjie199234/Corelib/pool"
	web "github.com/chenjie199234/Corelib/web"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	io "io"
	http "net/http"
	strings "strings"
)

var _WebPathProxyTob = "/admin.proxy/tob"

type ProxyWebClient interface {
	Tob(context.Context, *TobReq, http.Header) (*TobResp, error)
}

type proxyWebClient struct {
	cc *web.WebClient
}

func NewProxyWebClient(c *web.WebClient) ProxyWebClient {
	return &proxyWebClient{cc: c}
}

func (c *proxyWebClient) Tob(ctx context.Context, req *TobReq, header http.Header) (*TobResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathProxyTob, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.ConvertStdError(e)
	}
	resp := new(TobResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}

type ProxyWebServer interface {
	Tob(context.Context, *TobReq) (*TobResp, error)
}

func _Proxy_Tob_WebHandler(handler func(context.Context, *TobReq) (*TobResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(TobReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				ctx.Abort(cerror.ErrReq)
				return
			}
			data := pool.GetBuffer()
			defer pool.PutBuffer(data)
			data.AppendByte('{')
			if forms := ctx.GetForms("project_id"); len(forms) != 0 {
				data.AppendString("\"project_id\":")
				data.AppendByte('[')
				for _, form := range forms {
					data.AppendString(form)
					data.AppendByte(',')
				}
				data.Bytes()[data.Len()-1] = ']'
				data.AppendByte(',')
			}
			if form := ctx.GetForm("path"); len(form) != 0 {
				data.AppendString("\"path\":")
				if len(form) < 2 || form[0] != '"' || form[len(form)-1] != '"' {
					data.AppendByte('"')
					data.AppendString(form)
					data.AppendByte('"')
				} else {
					data.AppendString(form)
				}
				data.AppendByte(',')
			}
			if form := ctx.GetForm("appname"); len(form) != 0 {
				data.AppendString("\"appname\":")
				if len(form) < 2 || form[0] != '"' || form[len(form)-1] != '"' {
					data.AppendByte('"')
					data.AppendString(form)
					data.AppendByte('"')
				} else {
					data.AppendString(form)
				}
				data.AppendByte(',')
			}
			if form := ctx.GetForm("groupname"); len(form) != 0 {
				data.AppendString("\"groupname\":")
				if len(form) < 2 || form[0] != '"' || form[len(form)-1] != '"' {
					data.AppendByte('"')
					data.AppendString(form)
					data.AppendByte('"')
				} else {
					data.AppendString(form)
				}
				data.AppendByte(',')
			}
			if form := ctx.GetForm("data"); len(form) != 0 {
				data.AppendString("\"data\":")
				if len(form) < 2 || form[0] != '"' || form[len(form)-1] != '"' {
					data.AppendByte('"')
					data.AppendString(form)
					data.AppendByte('"')
				} else {
					data.AppendString(form)
				}
				data.AppendByte(',')
			}
			if data.Len() == 1 {
				data.AppendByte('}')
			} else {
				data.Bytes()[data.Len()-1] = '}'
			}
			if data.Len() > 2 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data.Bytes(), req); e != nil {
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/admin.proxy/tob]", errstr)
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.ConvertStdError(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(TobResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func RegisterProxyWebServer(engine *web.WebServer, svc ProxyWebServer, allmids map[string]web.OutsideHandler) {
	// avoid lint
	_ = allmids
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _Proxy_Tob_WebHandler(svc.Tob))
		engine.Post(_WebPathProxyTob, mids...)
	}
}
