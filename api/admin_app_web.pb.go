// Code generated by protoc-gen-go-web. DO NOT EDIT.
// version:
// 	protoc-gen-go-web v0.0.134<br />
// 	protoc            v6.30.2<br />
// source: api/admin_app.proto<br />

package api

import (
	context "context"
	cerror "github.com/chenjie199234/Corelib/cerror"
	metadata "github.com/chenjie199234/Corelib/metadata"
	web "github.com/chenjie199234/Corelib/web"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	io "io"
	slog "log/slog"
	http "net/http"
	strconv "strconv"
	strings "strings"
)

var _WebPathAppGetApp = "/admin.app/get_app"
var _WebPathAppSetApp = "/admin.app/set_app"
var _WebPathAppDelApp = "/admin.app/del_app"
var _WebPathAppUpdateAppSecret = "/admin.app/update_app_secret"
var _WebPathAppDelKey = "/admin.app/del_key"
var _WebPathAppGetKeyConfig = "/admin.app/get_key_config"
var _WebPathAppSetKeyConfig = "/admin.app/set_key_config"
var _WebPathAppRollback = "/admin.app/rollback"
var _WebPathAppWatchConfig = "/admin.app/watch_config"
var _WebPathAppWatchDiscover = "/admin.app/watch_discover"
var _WebPathAppGetInstances = "/admin.app/get_instances"
var _WebPathAppGetInstanceInfo = "/admin.app/get_instance_info"

type AppWebClient interface {
	GetApp(context.Context, *GetAppReq, http.Header) (*GetAppResp, error)
	SetApp(context.Context, *SetAppReq, http.Header) (*SetAppResp, error)
	DelApp(context.Context, *DelAppReq, http.Header) (*DelAppResp, error)
	UpdateAppSecret(context.Context, *UpdateAppSecretReq, http.Header) (*UpdateAppSecretResp, error)
	DelKey(context.Context, *DelKeyReq, http.Header) (*DelKeyResp, error)
	GetKeyConfig(context.Context, *GetKeyConfigReq, http.Header) (*GetKeyConfigResp, error)
	SetKeyConfig(context.Context, *SetKeyConfigReq, http.Header) (*SetKeyConfigResp, error)
	Rollback(context.Context, *RollbackReq, http.Header) (*RollbackResp, error)
	WatchConfig(context.Context, *WatchConfigReq, http.Header) (*WatchConfigResp, error)
	WatchDiscover(context.Context, *WatchDiscoverReq, http.Header) (*WatchDiscoverResp, error)
	GetInstances(context.Context, *GetInstancesReq, http.Header) (*GetInstancesResp, error)
	GetInstanceInfo(context.Context, *GetInstanceInfoReq, http.Header) (*GetInstanceInfoResp, error)
}

type appWebClient struct {
	cc *web.WebClient
}

func NewAppWebClient(c *web.WebClient) AppWebClient {
	return &appWebClient{cc: c}
}

func (c *appWebClient) GetApp(ctx context.Context, req *GetAppReq, header http.Header) (*GetAppResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathAppGetApp, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(GetAppResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *appWebClient) SetApp(ctx context.Context, req *SetAppReq, header http.Header) (*SetAppResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathAppSetApp, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(SetAppResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *appWebClient) DelApp(ctx context.Context, req *DelAppReq, header http.Header) (*DelAppResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathAppDelApp, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(DelAppResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *appWebClient) UpdateAppSecret(ctx context.Context, req *UpdateAppSecretReq, header http.Header) (*UpdateAppSecretResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathAppUpdateAppSecret, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(UpdateAppSecretResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *appWebClient) DelKey(ctx context.Context, req *DelKeyReq, header http.Header) (*DelKeyResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathAppDelKey, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(DelKeyResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *appWebClient) GetKeyConfig(ctx context.Context, req *GetKeyConfigReq, header http.Header) (*GetKeyConfigResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathAppGetKeyConfig, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(GetKeyConfigResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *appWebClient) SetKeyConfig(ctx context.Context, req *SetKeyConfigReq, header http.Header) (*SetKeyConfigResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathAppSetKeyConfig, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(SetKeyConfigResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *appWebClient) Rollback(ctx context.Context, req *RollbackReq, header http.Header) (*RollbackResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathAppRollback, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(RollbackResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *appWebClient) WatchConfig(ctx context.Context, req *WatchConfigReq, header http.Header) (*WatchConfigResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathAppWatchConfig, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(WatchConfigResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *appWebClient) WatchDiscover(ctx context.Context, req *WatchDiscoverReq, header http.Header) (*WatchDiscoverResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathAppWatchDiscover, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(WatchDiscoverResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *appWebClient) GetInstances(ctx context.Context, req *GetInstancesReq, header http.Header) (*GetInstancesResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathAppGetInstances, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(GetInstancesResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *appWebClient) GetInstanceInfo(ctx context.Context, req *GetInstanceInfoReq, header http.Header) (*GetInstanceInfoResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	if header == nil {
		header = make(http.Header)
	}
	header.Set("Content-Type", "application/x-protobuf")
	header.Set("Accept", "application/x-protobuf")
	reqd, _ := proto.Marshal(req)
	r, e := c.cc.Post(ctx, _WebPathAppGetInstanceInfo, "", header, metadata.GetMetadata(ctx), reqd)
	if e != nil {
		return nil, e
	}
	data, e := io.ReadAll(r.Body)
	r.Body.Close()
	if e != nil {
		return nil, cerror.Convert(e)
	}
	resp := new(GetInstanceInfoResp)
	if len(data) == 0 {
		return resp, nil
	}
	if strings.HasPrefix(r.Header.Get("Content-Type"), "application/x-protobuf") {
		if e := proto.Unmarshal(data, resp); e != nil {
			return nil, cerror.ErrResp
		}
	} else if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}

type AppWebServer interface {
	GetApp(context.Context, *GetAppReq) (*GetAppResp, error)
	SetApp(context.Context, *SetAppReq) (*SetAppResp, error)
	DelApp(context.Context, *DelAppReq) (*DelAppResp, error)
	UpdateAppSecret(context.Context, *UpdateAppSecretReq) (*UpdateAppSecretResp, error)
	DelKey(context.Context, *DelKeyReq) (*DelKeyResp, error)
	GetKeyConfig(context.Context, *GetKeyConfigReq) (*GetKeyConfigResp, error)
	SetKeyConfig(context.Context, *SetKeyConfigReq) (*SetKeyConfigResp, error)
	Rollback(context.Context, *RollbackReq) (*RollbackResp, error)
	WatchConfig(context.Context, *WatchConfigReq) (*WatchConfigResp, error)
	WatchDiscover(context.Context, *WatchDiscoverReq) (*WatchDiscoverResp, error)
	GetInstances(context.Context, *GetInstancesReq) (*GetInstancesResp, error)
	GetInstanceInfo(context.Context, *GetInstanceInfoReq) (*GetInstanceInfoResp, error)
}

func _App_GetApp_WebHandler(handler func(context.Context, *GetAppReq) (*GetAppResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(GetAppReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/get_app] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/get_app] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/get_app] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/get_app] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/admin.app/get_app] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.ProjectId
			if forms := ctx.GetForms("project_id"); len(forms) > 0 {
				req.ProjectId = make([]uint32, 0, len(forms))
				for _, form := range forms {
					if num, e := strconv.ParseUint(form, 10, 32); e != nil {
						slog.ErrorContext(ctx, "[/admin.app/get_app] data format wrong", slog.String("field", "project_id"))
						ctx.Abort(cerror.ErrReq)
						return
					} else {
						req.ProjectId = append(req.ProjectId, uint32(num))
					}
				}
			}
			// req.GName
			if form := ctx.GetForm("g_name"); len(form) != 0 {
				req.GName = form
			}
			// req.AName
			if form := ctx.GetForm("a_name"); len(form) != 0 {
				req.AName = form
			}
			// req.Secret
			if form := ctx.GetForm("secret"); len(form) != 0 {
				req.Secret = form
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/admin.app/get_app] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(GetAppResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _App_SetApp_WebHandler(handler func(context.Context, *SetAppReq) (*SetAppResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(SetAppReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/set_app] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/set_app] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/set_app] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/set_app] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/admin.app/set_app] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.ProjectId
			if forms := ctx.GetForms("project_id"); len(forms) > 0 {
				req.ProjectId = make([]uint32, 0, len(forms))
				for _, form := range forms {
					if num, e := strconv.ParseUint(form, 10, 32); e != nil {
						slog.ErrorContext(ctx, "[/admin.app/set_app] data format wrong", slog.String("field", "project_id"))
						ctx.Abort(cerror.ErrReq)
						return
					} else {
						req.ProjectId = append(req.ProjectId, uint32(num))
					}
				}
			}
			// req.GName
			if form := ctx.GetForm("g_name"); len(form) != 0 {
				req.GName = form
			}
			// req.AName
			if form := ctx.GetForm("a_name"); len(form) != 0 {
				req.AName = form
			}
			// req.Secret
			if form := ctx.GetForm("secret"); len(form) != 0 {
				req.Secret = form
			}
			// req.DiscoverMode
			if form := ctx.GetForm("discover_mode"); len(form) != 0 {
				req.DiscoverMode = form
			}
			// req.KubernetesNamespace
			if form := ctx.GetForm("kubernetes_namespace"); len(form) != 0 {
				req.KubernetesNamespace = form
			}
			// req.KubernetesLabelselector
			if form := ctx.GetForm("kubernetes_labelselector"); len(form) != 0 {
				req.KubernetesLabelselector = form
			}
			// req.KubernetesFieldselector
			if form := ctx.GetForm("kubernetes_fieldselector"); len(form) != 0 {
				req.KubernetesFieldselector = form
			}
			// req.DnsHost
			if form := ctx.GetForm("dns_host"); len(form) != 0 {
				req.DnsHost = form
			}
			// req.DnsInterval
			if form := ctx.GetForm("dns_interval"); len(form) != 0 {
				if num, e := strconv.ParseUint(form, 10, 32); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/set_app] data format wrong", slog.String("field", "dns_interval"))
					ctx.Abort(cerror.ErrReq)
					return
				} else {
					req.DnsInterval = uint32(num)
				}
			}
			// req.StaticAddrs
			if forms := ctx.GetForms("static_addrs"); len(forms) > 0 {
				req.StaticAddrs = forms
			}
			// req.CrpcPort
			if form := ctx.GetForm("crpc_port"); len(form) != 0 {
				if num, e := strconv.ParseUint(form, 10, 32); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/set_app] data format wrong", slog.String("field", "crpc_port"))
					ctx.Abort(cerror.ErrReq)
					return
				} else {
					req.CrpcPort = uint32(num)
				}
			}
			// req.CgrpcPort
			if form := ctx.GetForm("cgrpc_port"); len(form) != 0 {
				if num, e := strconv.ParseUint(form, 10, 32); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/set_app] data format wrong", slog.String("field", "cgrpc_port"))
					ctx.Abort(cerror.ErrReq)
					return
				} else {
					req.CgrpcPort = uint32(num)
				}
			}
			// req.WebPort
			if form := ctx.GetForm("web_port"); len(form) != 0 {
				if num, e := strconv.ParseUint(form, 10, 32); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/set_app] data format wrong", slog.String("field", "web_port"))
					ctx.Abort(cerror.ErrReq)
					return
				} else {
					req.WebPort = uint32(num)
				}
			}
			// req.NewApp
			if form := ctx.GetForm("new_app"); len(form) != 0 {
				if form == "true" {
					req.NewApp = true
				} else if form == "false" {
					req.NewApp = false
				} else {
					slog.ErrorContext(ctx, "[/admin.app/set_app] data format wrong", slog.String("field", "new_app"))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/admin.app/set_app] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(SetAppResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _App_DelApp_WebHandler(handler func(context.Context, *DelAppReq) (*DelAppResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(DelAppReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/del_app] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/del_app] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/del_app] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/del_app] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/admin.app/del_app] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.ProjectId
			if forms := ctx.GetForms("project_id"); len(forms) > 0 {
				req.ProjectId = make([]uint32, 0, len(forms))
				for _, form := range forms {
					if num, e := strconv.ParseUint(form, 10, 32); e != nil {
						slog.ErrorContext(ctx, "[/admin.app/del_app] data format wrong", slog.String("field", "project_id"))
						ctx.Abort(cerror.ErrReq)
						return
					} else {
						req.ProjectId = append(req.ProjectId, uint32(num))
					}
				}
			}
			// req.GName
			if form := ctx.GetForm("g_name"); len(form) != 0 {
				req.GName = form
			}
			// req.AName
			if form := ctx.GetForm("a_name"); len(form) != 0 {
				req.AName = form
			}
			// req.Secret
			if form := ctx.GetForm("secret"); len(form) != 0 {
				req.Secret = form
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/admin.app/del_app] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(DelAppResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _App_UpdateAppSecret_WebHandler(handler func(context.Context, *UpdateAppSecretReq) (*UpdateAppSecretResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(UpdateAppSecretReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/update_app_secret] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/update_app_secret] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/update_app_secret] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/update_app_secret] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/admin.app/update_app_secret] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.ProjectId
			if forms := ctx.GetForms("project_id"); len(forms) > 0 {
				req.ProjectId = make([]uint32, 0, len(forms))
				for _, form := range forms {
					if num, e := strconv.ParseUint(form, 10, 32); e != nil {
						slog.ErrorContext(ctx, "[/admin.app/update_app_secret] data format wrong", slog.String("field", "project_id"))
						ctx.Abort(cerror.ErrReq)
						return
					} else {
						req.ProjectId = append(req.ProjectId, uint32(num))
					}
				}
			}
			// req.GName
			if form := ctx.GetForm("g_name"); len(form) != 0 {
				req.GName = form
			}
			// req.AName
			if form := ctx.GetForm("a_name"); len(form) != 0 {
				req.AName = form
			}
			// req.OldSecret
			if form := ctx.GetForm("old_secret"); len(form) != 0 {
				req.OldSecret = form
			}
			// req.NewSecret
			if form := ctx.GetForm("new_secret"); len(form) != 0 {
				req.NewSecret = form
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/admin.app/update_app_secret] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(UpdateAppSecretResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _App_DelKey_WebHandler(handler func(context.Context, *DelKeyReq) (*DelKeyResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(DelKeyReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/del_key] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/del_key] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/del_key] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/del_key] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/admin.app/del_key] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.ProjectId
			if forms := ctx.GetForms("project_id"); len(forms) > 0 {
				req.ProjectId = make([]uint32, 0, len(forms))
				for _, form := range forms {
					if num, e := strconv.ParseUint(form, 10, 32); e != nil {
						slog.ErrorContext(ctx, "[/admin.app/del_key] data format wrong", slog.String("field", "project_id"))
						ctx.Abort(cerror.ErrReq)
						return
					} else {
						req.ProjectId = append(req.ProjectId, uint32(num))
					}
				}
			}
			// req.GName
			if form := ctx.GetForm("g_name"); len(form) != 0 {
				req.GName = form
			}
			// req.AName
			if form := ctx.GetForm("a_name"); len(form) != 0 {
				req.AName = form
			}
			// req.Key
			if form := ctx.GetForm("key"); len(form) != 0 {
				req.Key = form
			}
			// req.Secret
			if form := ctx.GetForm("secret"); len(form) != 0 {
				req.Secret = form
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/admin.app/del_key] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(DelKeyResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _App_GetKeyConfig_WebHandler(handler func(context.Context, *GetKeyConfigReq) (*GetKeyConfigResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(GetKeyConfigReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/get_key_config] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/get_key_config] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/get_key_config] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/get_key_config] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/admin.app/get_key_config] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.ProjectId
			if forms := ctx.GetForms("project_id"); len(forms) > 0 {
				req.ProjectId = make([]uint32, 0, len(forms))
				for _, form := range forms {
					if num, e := strconv.ParseUint(form, 10, 32); e != nil {
						slog.ErrorContext(ctx, "[/admin.app/get_key_config] data format wrong", slog.String("field", "project_id"))
						ctx.Abort(cerror.ErrReq)
						return
					} else {
						req.ProjectId = append(req.ProjectId, uint32(num))
					}
				}
			}
			// req.GName
			if form := ctx.GetForm("g_name"); len(form) != 0 {
				req.GName = form
			}
			// req.AName
			if form := ctx.GetForm("a_name"); len(form) != 0 {
				req.AName = form
			}
			// req.Key
			if form := ctx.GetForm("key"); len(form) != 0 {
				req.Key = form
			}
			// req.Index
			if form := ctx.GetForm("index"); len(form) != 0 {
				if num, e := strconv.ParseUint(form, 10, 32); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/get_key_config] data format wrong", slog.String("field", "index"))
					ctx.Abort(cerror.ErrReq)
					return
				} else {
					req.Index = uint32(num)
				}
			}
			// req.Secret
			if form := ctx.GetForm("secret"); len(form) != 0 {
				req.Secret = form
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/admin.app/get_key_config] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(GetKeyConfigResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _App_SetKeyConfig_WebHandler(handler func(context.Context, *SetKeyConfigReq) (*SetKeyConfigResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(SetKeyConfigReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/set_key_config] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/set_key_config] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/set_key_config] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/set_key_config] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/admin.app/set_key_config] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.ProjectId
			if forms := ctx.GetForms("project_id"); len(forms) > 0 {
				req.ProjectId = make([]uint32, 0, len(forms))
				for _, form := range forms {
					if num, e := strconv.ParseUint(form, 10, 32); e != nil {
						slog.ErrorContext(ctx, "[/admin.app/set_key_config] data format wrong", slog.String("field", "project_id"))
						ctx.Abort(cerror.ErrReq)
						return
					} else {
						req.ProjectId = append(req.ProjectId, uint32(num))
					}
				}
			}
			// req.GName
			if form := ctx.GetForm("g_name"); len(form) != 0 {
				req.GName = form
			}
			// req.AName
			if form := ctx.GetForm("a_name"); len(form) != 0 {
				req.AName = form
			}
			// req.Key
			if form := ctx.GetForm("key"); len(form) != 0 {
				req.Key = form
			}
			// req.Value
			if form := ctx.GetForm("value"); len(form) != 0 {
				req.Value = form
			}
			// req.ValueType
			if form := ctx.GetForm("value_type"); len(form) != 0 {
				req.ValueType = form
			}
			// req.Secret
			if form := ctx.GetForm("secret"); len(form) != 0 {
				req.Secret = form
			}
			// req.NewKey
			if form := ctx.GetForm("new_key"); len(form) != 0 {
				if form == "true" {
					req.NewKey = true
				} else if form == "false" {
					req.NewKey = false
				} else {
					slog.ErrorContext(ctx, "[/admin.app/set_key_config] data format wrong", slog.String("field", "new_key"))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/admin.app/set_key_config] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(SetKeyConfigResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _App_Rollback_WebHandler(handler func(context.Context, *RollbackReq) (*RollbackResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(RollbackReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/rollback] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/rollback] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/rollback] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/rollback] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/admin.app/rollback] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.ProjectId
			if forms := ctx.GetForms("project_id"); len(forms) > 0 {
				req.ProjectId = make([]uint32, 0, len(forms))
				for _, form := range forms {
					if num, e := strconv.ParseUint(form, 10, 32); e != nil {
						slog.ErrorContext(ctx, "[/admin.app/rollback] data format wrong", slog.String("field", "project_id"))
						ctx.Abort(cerror.ErrReq)
						return
					} else {
						req.ProjectId = append(req.ProjectId, uint32(num))
					}
				}
			}
			// req.GName
			if form := ctx.GetForm("g_name"); len(form) != 0 {
				req.GName = form
			}
			// req.AName
			if form := ctx.GetForm("a_name"); len(form) != 0 {
				req.AName = form
			}
			// req.Key
			if form := ctx.GetForm("key"); len(form) != 0 {
				req.Key = form
			}
			// req.Secret
			if form := ctx.GetForm("secret"); len(form) != 0 {
				req.Secret = form
			}
			// req.Index
			if form := ctx.GetForm("index"); len(form) != 0 {
				if num, e := strconv.ParseUint(form, 10, 32); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/rollback] data format wrong", slog.String("field", "index"))
					ctx.Abort(cerror.ErrReq)
					return
				} else {
					req.Index = uint32(num)
				}
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/admin.app/rollback] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(RollbackResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _App_WatchConfig_WebHandler(handler func(context.Context, *WatchConfigReq) (*WatchConfigResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(WatchConfigReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/watch_config] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/watch_config] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/watch_config] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/watch_config] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			slog.ErrorContext(ctx, "[/admin.app/watch_config] request message contain nested message or map,Content-Type must be application/json or application/x-protobuf")
			ctx.Abort(cerror.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/admin.app/watch_config] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(WatchConfigResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _App_WatchDiscover_WebHandler(handler func(context.Context, *WatchDiscoverReq) (*WatchDiscoverResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(WatchDiscoverReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/watch_discover] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/watch_discover] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/watch_discover] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/watch_discover] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/admin.app/watch_discover] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.ProjectName
			if form := ctx.GetForm("project_name"); len(form) != 0 {
				req.ProjectName = form
			}
			// req.GName
			if form := ctx.GetForm("g_name"); len(form) != 0 {
				req.GName = form
			}
			// req.AName
			if form := ctx.GetForm("a_name"); len(form) != 0 {
				req.AName = form
			}
			// req.CurDiscoverMode
			if form := ctx.GetForm("cur_discover_mode"); len(form) != 0 {
				req.CurDiscoverMode = form
			}
			// req.CurDnsHost
			if form := ctx.GetForm("cur_dns_host"); len(form) != 0 {
				req.CurDnsHost = form
			}
			// req.CurDnsInterval
			if form := ctx.GetForm("cur_dns_interval"); len(form) != 0 {
				if num, e := strconv.ParseUint(form, 10, 32); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/watch_discover] data format wrong", slog.String("field", "cur_dns_interval"))
					ctx.Abort(cerror.ErrReq)
					return
				} else {
					req.CurDnsInterval = uint32(num)
				}
			}
			// req.CurStaticAddrs
			if forms := ctx.GetForms("cur_static_addrs"); len(forms) > 0 {
				req.CurStaticAddrs = forms
			}
			// req.CurKubernetesNamespace
			if form := ctx.GetForm("cur_kubernetes_namespace"); len(form) != 0 {
				req.CurKubernetesNamespace = form
			}
			// req.CurKubernetesLabelselector
			if form := ctx.GetForm("cur_kubernetes_labelselector"); len(form) != 0 {
				req.CurKubernetesLabelselector = form
			}
			// req.CurKubernetesFieldselector
			if form := ctx.GetForm("cur_kubernetes_fieldselector"); len(form) != 0 {
				req.CurKubernetesFieldselector = form
			}
			// req.CurCrpcPort
			if form := ctx.GetForm("cur_crpc_port"); len(form) != 0 {
				if num, e := strconv.ParseUint(form, 10, 32); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/watch_discover] data format wrong", slog.String("field", "cur_crpc_port"))
					ctx.Abort(cerror.ErrReq)
					return
				} else {
					req.CurCrpcPort = uint32(num)
				}
			}
			// req.CurCgrpcPort
			if form := ctx.GetForm("cur_cgrpc_port"); len(form) != 0 {
				if num, e := strconv.ParseUint(form, 10, 32); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/watch_discover] data format wrong", slog.String("field", "cur_cgrpc_port"))
					ctx.Abort(cerror.ErrReq)
					return
				} else {
					req.CurCgrpcPort = uint32(num)
				}
			}
			// req.CurWebPort
			if form := ctx.GetForm("cur_web_port"); len(form) != 0 {
				if num, e := strconv.ParseUint(form, 10, 32); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/watch_discover] data format wrong", slog.String("field", "cur_web_port"))
					ctx.Abort(cerror.ErrReq)
					return
				} else {
					req.CurWebPort = uint32(num)
				}
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/admin.app/watch_discover] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(WatchDiscoverResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _App_GetInstances_WebHandler(handler func(context.Context, *GetInstancesReq) (*GetInstancesResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(GetInstancesReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/get_instances] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/get_instances] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/get_instances] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/get_instances] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/admin.app/get_instances] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.ProjectId
			if forms := ctx.GetForms("project_id"); len(forms) > 0 {
				req.ProjectId = make([]uint32, 0, len(forms))
				for _, form := range forms {
					if num, e := strconv.ParseUint(form, 10, 32); e != nil {
						slog.ErrorContext(ctx, "[/admin.app/get_instances] data format wrong", slog.String("field", "project_id"))
						ctx.Abort(cerror.ErrReq)
						return
					} else {
						req.ProjectId = append(req.ProjectId, uint32(num))
					}
				}
			}
			// req.GName
			if form := ctx.GetForm("g_name"); len(form) != 0 {
				req.GName = form
			}
			// req.AName
			if form := ctx.GetForm("a_name"); len(form) != 0 {
				req.AName = form
			}
			// req.Secret
			if form := ctx.GetForm("secret"); len(form) != 0 {
				req.Secret = form
			}
			// req.WithInfo
			if form := ctx.GetForm("with_info"); len(form) != 0 {
				if form == "true" {
					req.WithInfo = true
				} else if form == "false" {
					req.WithInfo = false
				} else {
					slog.ErrorContext(ctx, "[/admin.app/get_instances] data format wrong", slog.String("field", "with_info"))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/admin.app/get_instances] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(GetInstancesResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func _App_GetInstanceInfo_WebHandler(handler func(context.Context, *GetInstanceInfoReq) (*GetInstanceInfoResp, error)) web.OutsideHandler {
	return func(ctx *web.Context) {
		req := new(GetInstanceInfoReq)
		if strings.HasPrefix(ctx.GetContentType(), "application/json") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/get_instance_info] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := (protojson.UnmarshalOptions{AllowPartial: true, DiscardUnknown: true}).Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/get_instance_info] unmarshal json body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else if strings.HasPrefix(ctx.GetContentType(), "application/x-protobuf") {
			data, e := ctx.GetBody()
			if e != nil {
				slog.ErrorContext(ctx, "[/admin.app/get_instance_info] get body failed", slog.String("error", e.Error()))
				ctx.Abort(e)
				return
			}
			if len(data) > 0 {
				if e := proto.Unmarshal(data, req); e != nil {
					slog.ErrorContext(ctx, "[/admin.app/get_instance_info] unmarshal proto body failed", slog.String("error", e.Error()))
					ctx.Abort(cerror.ErrReq)
					return
				}
			}
		} else {
			if e := ctx.ParseForm(); e != nil {
				slog.ErrorContext(ctx, "[/admin.app/get_instance_info] parse form failed", slog.String("error", e.Error()))
				ctx.Abort(cerror.ErrReq)
				return
			}
			// req.ProjectId
			if forms := ctx.GetForms("project_id"); len(forms) > 0 {
				req.ProjectId = make([]uint32, 0, len(forms))
				for _, form := range forms {
					if num, e := strconv.ParseUint(form, 10, 32); e != nil {
						slog.ErrorContext(ctx, "[/admin.app/get_instance_info] data format wrong", slog.String("field", "project_id"))
						ctx.Abort(cerror.ErrReq)
						return
					} else {
						req.ProjectId = append(req.ProjectId, uint32(num))
					}
				}
			}
			// req.GName
			if form := ctx.GetForm("g_name"); len(form) != 0 {
				req.GName = form
			}
			// req.AName
			if form := ctx.GetForm("a_name"); len(form) != 0 {
				req.AName = form
			}
			// req.Secret
			if form := ctx.GetForm("secret"); len(form) != 0 {
				req.Secret = form
			}
			// req.Addr
			if form := ctx.GetForm("addr"); len(form) != 0 {
				req.Addr = form
			}
		}
		if errstr := req.Validate(); errstr != "" {
			slog.ErrorContext(ctx, "[/admin.app/get_instance_info] validate failed", slog.String("error", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		ee := cerror.Convert(e)
		if ee != nil {
			ctx.Abort(ee)
			return
		}
		if resp == nil {
			resp = new(GetInstanceInfoResp)
		}
		if strings.HasPrefix(ctx.GetAcceptType(), "application/x-protobuf") {
			respd, _ := proto.Marshal(resp)
			ctx.Write("application/x-protobuf", respd)
		} else {
			respd, _ := protojson.MarshalOptions{AllowPartial: true, UseProtoNames: true, UseEnumNumbers: true, EmitUnpopulated: true}.Marshal(resp)
			ctx.Write("application/json", respd)
		}
	}
}
func RegisterAppWebServer(router *web.Router, svc AppWebServer, allmids map[string]web.OutsideHandler) {
	// avoid lint
	_ = allmids
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _App_GetApp_WebHandler(svc.GetApp))
		router.Post(_WebPathAppGetApp, mids...)
	}
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _App_SetApp_WebHandler(svc.SetApp))
		router.Post(_WebPathAppSetApp, mids...)
	}
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _App_DelApp_WebHandler(svc.DelApp))
		router.Post(_WebPathAppDelApp, mids...)
	}
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _App_UpdateAppSecret_WebHandler(svc.UpdateAppSecret))
		router.Post(_WebPathAppUpdateAppSecret, mids...)
	}
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _App_DelKey_WebHandler(svc.DelKey))
		router.Post(_WebPathAppDelKey, mids...)
	}
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _App_GetKeyConfig_WebHandler(svc.GetKeyConfig))
		router.Post(_WebPathAppGetKeyConfig, mids...)
	}
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _App_SetKeyConfig_WebHandler(svc.SetKeyConfig))
		router.Post(_WebPathAppSetKeyConfig, mids...)
	}
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _App_Rollback_WebHandler(svc.Rollback))
		router.Post(_WebPathAppRollback, mids...)
	}
	{
		requiredMids := []string{"accesskey"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _App_WatchConfig_WebHandler(svc.WatchConfig))
		router.Post(_WebPathAppWatchConfig, mids...)
	}
	{
		requiredMids := []string{"accesskey"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _App_WatchDiscover_WebHandler(svc.WatchDiscover))
		router.Post(_WebPathAppWatchDiscover, mids...)
	}
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _App_GetInstances_WebHandler(svc.GetInstances))
		router.Post(_WebPathAppGetInstances, mids...)
	}
	{
		requiredMids := []string{"token"}
		mids := make([]web.OutsideHandler, 0, 2)
		for _, v := range requiredMids {
			if mid, ok := allmids[v]; ok {
				mids = append(mids, mid)
			} else {
				panic("missing midware:" + v)
			}
		}
		mids = append(mids, _App_GetInstanceInfo_WebHandler(svc.GetInstanceInfo))
		router.Post(_WebPathAppGetInstanceInfo, mids...)
	}
}
