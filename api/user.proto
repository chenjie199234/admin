syntax="proto3";

//this is the proto package name,all proto in this project must use this name as the proto package name
package admin;
//this is the golang's package name,all proto in this project must use this name as the golang's package name
option go_package="github.com/chenjie199234/admin/api;api";
//https://github.com/chenjie199234/Corelib/blob/main/pbex/pbex.proto
import "pbex/pbex.proto";

//this is the proto file for user service
service user{
	//rpc example(examplereq)returns(exampleresp){
	//	option (pbex.method)="get";//can be set to get,delete,post,put,patch
	//	option (pbex.web_midwares)="b";
	//	option (pbex.web_midwares)="c";
	//	option (pbex.web_midwares)="a";//this function on web protocol has 3 midwares,it's order is b,c,a
	//	option (pbex.crpc_midwares)="b";
	//	option (pbex.crpc_midwares)="c";
	//	option (pbex.crpc_midwares)="a";//this function on crpc protocol has 3 midwares,it's order is b,c,a
	//	option (pbex.cgrpc_midwares)="b";
	//	option (pbex.cgrpc_midwares)="c";
	//	option (pbex.cgrpc_midwares)="a";//this function on grpc protocol has 3 midwares,it's order is b,c,a
	//}

	rpc login(login_req)returns(login_resp){
		option (pbex.method)="post";
	}

	rpc get_users(get_users_req)returns(get_users_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	rpc search_users(search_users_req)returns(search_users_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
}
//req can be set with pbex extentions
//message examplereq{
	//int64 example_for_extentions=1[(pbex.int_gt)=1,(pbex.int_lt)=100];
//}
//resp's pbex extentions will be ignore
//message exampleresp{
	//int64 example_resp=1;
//}

message login_req {
}
message login_resp {
	string token=1;
}
message user_info {
	string user_id=1;
	string user_name=2;
	repeated string department=3;
	uint32 ctime=4;
}
message get_users_req {
	repeated string user_ids=1[(pbex.map_repeated_len_not_eq)=0];
}
message get_users_resp {
	repeated user_info users=1;//key userid,value username
}
message search_users_req {
	string user_name=1[(pbex.string_bytes_len_not_eq)=0];
}
message search_users_resp {
	repeated user_info users=1;//key userid,value username
}
