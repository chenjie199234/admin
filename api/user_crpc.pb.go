// Code generated by protoc-gen-go-crpc. DO NOT EDIT.
// version:
// 	protoc-gen-go-crpc v0.0.75-dev
// 	protoc             v3.21.11
// source: api/user.proto

package api

import (
	context "context"
	cerror "github.com/chenjie199234/Corelib/cerror"
	crpc "github.com/chenjie199234/Corelib/crpc"
	log "github.com/chenjie199234/Corelib/log"
	metadata "github.com/chenjie199234/Corelib/metadata"
	proto "google.golang.org/protobuf/proto"
)

var _CrpcPathUserUserLogin = "/admin.user/user_login"
var _CrpcPathUserInviteProject = "/admin.user/invite_project"
var _CrpcPathUserKickProject = "/admin.user/kick_project"
var _CrpcPathUserSearchUsers = "/admin.user/search_users"
var _CrpcPathUserUpdateUser = "/admin.user/update_user"
var _CrpcPathUserCreateRole = "/admin.user/create_role"
var _CrpcPathUserSearchRoles = "/admin.user/search_roles"
var _CrpcPathUserUpdateRole = "/admin.user/update_role"
var _CrpcPathUserDelRoles = "/admin.user/del_roles"
var _CrpcPathUserAddUserRole = "/admin.user/add_user_role"
var _CrpcPathUserDelUserRole = "/admin.user/del_user_role"

type UserCrpcClient interface {
	UserLogin(context.Context, *UserLoginReq) (*UserLoginResp, error)
	InviteProject(context.Context, *InviteProjectReq) (*InviteProjectResp, error)
	KickProject(context.Context, *KickProjectReq) (*KickProjectResp, error)
	SearchUsers(context.Context, *SearchUsersReq) (*SearchUsersResp, error)
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserResp, error)
	CreateRole(context.Context, *CreateRoleReq) (*CreateRoleResp, error)
	SearchRoles(context.Context, *SearchRolesReq) (*SearchRolesResp, error)
	UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleResp, error)
	DelRoles(context.Context, *DelRolesReq) (*DelRolesResp, error)
	AddUserRole(context.Context, *AddUserRoleReq) (*AddUserRoleResp, error)
	DelUserRole(context.Context, *DelUserRoleReq) (*DelUserRoleResp, error)
}

type userCrpcClient struct {
	cc *crpc.CrpcClient
}

func NewUserCrpcClient(c *crpc.CrpcClient) UserCrpcClient {
	return &userCrpcClient{cc: c}
}

func (c *userCrpcClient) UserLogin(ctx context.Context, req *UserLoginReq) (*UserLoginResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	reqd, _ := proto.Marshal(req)
	respd, e := c.cc.Call(ctx, _CrpcPathUserUserLogin, reqd, metadata.GetMetadata(ctx))
	if e != nil {
		return nil, e
	}
	resp := new(UserLoginResp)
	if len(respd) == 0 {
		return resp, nil
	}
	if e := proto.Unmarshal(respd, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *userCrpcClient) InviteProject(ctx context.Context, req *InviteProjectReq) (*InviteProjectResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	reqd, _ := proto.Marshal(req)
	respd, e := c.cc.Call(ctx, _CrpcPathUserInviteProject, reqd, metadata.GetMetadata(ctx))
	if e != nil {
		return nil, e
	}
	resp := new(InviteProjectResp)
	if len(respd) == 0 {
		return resp, nil
	}
	if e := proto.Unmarshal(respd, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *userCrpcClient) KickProject(ctx context.Context, req *KickProjectReq) (*KickProjectResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	reqd, _ := proto.Marshal(req)
	respd, e := c.cc.Call(ctx, _CrpcPathUserKickProject, reqd, metadata.GetMetadata(ctx))
	if e != nil {
		return nil, e
	}
	resp := new(KickProjectResp)
	if len(respd) == 0 {
		return resp, nil
	}
	if e := proto.Unmarshal(respd, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *userCrpcClient) SearchUsers(ctx context.Context, req *SearchUsersReq) (*SearchUsersResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	reqd, _ := proto.Marshal(req)
	respd, e := c.cc.Call(ctx, _CrpcPathUserSearchUsers, reqd, metadata.GetMetadata(ctx))
	if e != nil {
		return nil, e
	}
	resp := new(SearchUsersResp)
	if len(respd) == 0 {
		return resp, nil
	}
	if e := proto.Unmarshal(respd, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *userCrpcClient) UpdateUser(ctx context.Context, req *UpdateUserReq) (*UpdateUserResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	reqd, _ := proto.Marshal(req)
	respd, e := c.cc.Call(ctx, _CrpcPathUserUpdateUser, reqd, metadata.GetMetadata(ctx))
	if e != nil {
		return nil, e
	}
	resp := new(UpdateUserResp)
	if len(respd) == 0 {
		return resp, nil
	}
	if e := proto.Unmarshal(respd, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *userCrpcClient) CreateRole(ctx context.Context, req *CreateRoleReq) (*CreateRoleResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	reqd, _ := proto.Marshal(req)
	respd, e := c.cc.Call(ctx, _CrpcPathUserCreateRole, reqd, metadata.GetMetadata(ctx))
	if e != nil {
		return nil, e
	}
	resp := new(CreateRoleResp)
	if len(respd) == 0 {
		return resp, nil
	}
	if e := proto.Unmarshal(respd, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *userCrpcClient) SearchRoles(ctx context.Context, req *SearchRolesReq) (*SearchRolesResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	reqd, _ := proto.Marshal(req)
	respd, e := c.cc.Call(ctx, _CrpcPathUserSearchRoles, reqd, metadata.GetMetadata(ctx))
	if e != nil {
		return nil, e
	}
	resp := new(SearchRolesResp)
	if len(respd) == 0 {
		return resp, nil
	}
	if e := proto.Unmarshal(respd, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *userCrpcClient) UpdateRole(ctx context.Context, req *UpdateRoleReq) (*UpdateRoleResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	reqd, _ := proto.Marshal(req)
	respd, e := c.cc.Call(ctx, _CrpcPathUserUpdateRole, reqd, metadata.GetMetadata(ctx))
	if e != nil {
		return nil, e
	}
	resp := new(UpdateRoleResp)
	if len(respd) == 0 {
		return resp, nil
	}
	if e := proto.Unmarshal(respd, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *userCrpcClient) DelRoles(ctx context.Context, req *DelRolesReq) (*DelRolesResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	reqd, _ := proto.Marshal(req)
	respd, e := c.cc.Call(ctx, _CrpcPathUserDelRoles, reqd, metadata.GetMetadata(ctx))
	if e != nil {
		return nil, e
	}
	resp := new(DelRolesResp)
	if len(respd) == 0 {
		return resp, nil
	}
	if e := proto.Unmarshal(respd, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *userCrpcClient) AddUserRole(ctx context.Context, req *AddUserRoleReq) (*AddUserRoleResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	reqd, _ := proto.Marshal(req)
	respd, e := c.cc.Call(ctx, _CrpcPathUserAddUserRole, reqd, metadata.GetMetadata(ctx))
	if e != nil {
		return nil, e
	}
	resp := new(AddUserRoleResp)
	if len(respd) == 0 {
		return resp, nil
	}
	if e := proto.Unmarshal(respd, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}
func (c *userCrpcClient) DelUserRole(ctx context.Context, req *DelUserRoleReq) (*DelUserRoleResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	reqd, _ := proto.Marshal(req)
	respd, e := c.cc.Call(ctx, _CrpcPathUserDelUserRole, reqd, metadata.GetMetadata(ctx))
	if e != nil {
		return nil, e
	}
	resp := new(DelUserRoleResp)
	if len(respd) == 0 {
		return resp, nil
	}
	if e := proto.Unmarshal(respd, resp); e != nil {
		return nil, cerror.ErrResp
	}
	return resp, nil
}

type UserCrpcServer interface {
	UserLogin(context.Context, *UserLoginReq) (*UserLoginResp, error)
	InviteProject(context.Context, *InviteProjectReq) (*InviteProjectResp, error)
	KickProject(context.Context, *KickProjectReq) (*KickProjectResp, error)
	SearchUsers(context.Context, *SearchUsersReq) (*SearchUsersResp, error)
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserResp, error)
	CreateRole(context.Context, *CreateRoleReq) (*CreateRoleResp, error)
	SearchRoles(context.Context, *SearchRolesReq) (*SearchRolesResp, error)
	UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleResp, error)
	DelRoles(context.Context, *DelRolesReq) (*DelRolesResp, error)
	AddUserRole(context.Context, *AddUserRoleReq) (*AddUserRoleResp, error)
	DelUserRole(context.Context, *DelUserRoleReq) (*DelUserRoleResp, error)
}

func _User_UserLogin_CrpcHandler(handler func(context.Context, *UserLoginReq) (*UserLoginResp, error)) crpc.OutsideHandler {
	return func(ctx *crpc.Context) {
		req := new(UserLoginReq)
		if e := proto.Unmarshal(ctx.GetBody(), req); e != nil {
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(UserLoginResp)
		}
		respd, _ := proto.Marshal(resp)
		ctx.Write(respd)
	}
}
func _User_InviteProject_CrpcHandler(handler func(context.Context, *InviteProjectReq) (*InviteProjectResp, error)) crpc.OutsideHandler {
	return func(ctx *crpc.Context) {
		req := new(InviteProjectReq)
		if e := proto.Unmarshal(ctx.GetBody(), req); e != nil {
			ctx.Abort(cerror.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/admin.user/invite_project]", errstr)
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(InviteProjectResp)
		}
		respd, _ := proto.Marshal(resp)
		ctx.Write(respd)
	}
}
func _User_KickProject_CrpcHandler(handler func(context.Context, *KickProjectReq) (*KickProjectResp, error)) crpc.OutsideHandler {
	return func(ctx *crpc.Context) {
		req := new(KickProjectReq)
		if e := proto.Unmarshal(ctx.GetBody(), req); e != nil {
			ctx.Abort(cerror.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/admin.user/kick_project]", errstr)
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(KickProjectResp)
		}
		respd, _ := proto.Marshal(resp)
		ctx.Write(respd)
	}
}
func _User_SearchUsers_CrpcHandler(handler func(context.Context, *SearchUsersReq) (*SearchUsersResp, error)) crpc.OutsideHandler {
	return func(ctx *crpc.Context) {
		req := new(SearchUsersReq)
		if e := proto.Unmarshal(ctx.GetBody(), req); e != nil {
			ctx.Abort(cerror.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/admin.user/search_users]", errstr)
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(SearchUsersResp)
		}
		respd, _ := proto.Marshal(resp)
		ctx.Write(respd)
	}
}
func _User_UpdateUser_CrpcHandler(handler func(context.Context, *UpdateUserReq) (*UpdateUserResp, error)) crpc.OutsideHandler {
	return func(ctx *crpc.Context) {
		req := new(UpdateUserReq)
		if e := proto.Unmarshal(ctx.GetBody(), req); e != nil {
			ctx.Abort(cerror.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/admin.user/update_user]", errstr)
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(UpdateUserResp)
		}
		respd, _ := proto.Marshal(resp)
		ctx.Write(respd)
	}
}
func _User_CreateRole_CrpcHandler(handler func(context.Context, *CreateRoleReq) (*CreateRoleResp, error)) crpc.OutsideHandler {
	return func(ctx *crpc.Context) {
		req := new(CreateRoleReq)
		if e := proto.Unmarshal(ctx.GetBody(), req); e != nil {
			ctx.Abort(cerror.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/admin.user/create_role]", errstr)
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(CreateRoleResp)
		}
		respd, _ := proto.Marshal(resp)
		ctx.Write(respd)
	}
}
func _User_SearchRoles_CrpcHandler(handler func(context.Context, *SearchRolesReq) (*SearchRolesResp, error)) crpc.OutsideHandler {
	return func(ctx *crpc.Context) {
		req := new(SearchRolesReq)
		if e := proto.Unmarshal(ctx.GetBody(), req); e != nil {
			ctx.Abort(cerror.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/admin.user/search_roles]", errstr)
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(SearchRolesResp)
		}
		respd, _ := proto.Marshal(resp)
		ctx.Write(respd)
	}
}
func _User_UpdateRole_CrpcHandler(handler func(context.Context, *UpdateRoleReq) (*UpdateRoleResp, error)) crpc.OutsideHandler {
	return func(ctx *crpc.Context) {
		req := new(UpdateRoleReq)
		if e := proto.Unmarshal(ctx.GetBody(), req); e != nil {
			ctx.Abort(cerror.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/admin.user/update_role]", errstr)
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(UpdateRoleResp)
		}
		respd, _ := proto.Marshal(resp)
		ctx.Write(respd)
	}
}
func _User_DelRoles_CrpcHandler(handler func(context.Context, *DelRolesReq) (*DelRolesResp, error)) crpc.OutsideHandler {
	return func(ctx *crpc.Context) {
		req := new(DelRolesReq)
		if e := proto.Unmarshal(ctx.GetBody(), req); e != nil {
			ctx.Abort(cerror.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/admin.user/del_roles]", errstr)
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(DelRolesResp)
		}
		respd, _ := proto.Marshal(resp)
		ctx.Write(respd)
	}
}
func _User_AddUserRole_CrpcHandler(handler func(context.Context, *AddUserRoleReq) (*AddUserRoleResp, error)) crpc.OutsideHandler {
	return func(ctx *crpc.Context) {
		req := new(AddUserRoleReq)
		if e := proto.Unmarshal(ctx.GetBody(), req); e != nil {
			ctx.Abort(cerror.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/admin.user/add_user_role]", errstr)
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(AddUserRoleResp)
		}
		respd, _ := proto.Marshal(resp)
		ctx.Write(respd)
	}
}
func _User_DelUserRole_CrpcHandler(handler func(context.Context, *DelUserRoleReq) (*DelUserRoleResp, error)) crpc.OutsideHandler {
	return func(ctx *crpc.Context) {
		req := new(DelUserRoleReq)
		if e := proto.Unmarshal(ctx.GetBody(), req); e != nil {
			ctx.Abort(cerror.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/admin.user/del_user_role]", errstr)
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(DelUserRoleResp)
		}
		respd, _ := proto.Marshal(resp)
		ctx.Write(respd)
	}
}
func RegisterUserCrpcServer(engine *crpc.CrpcServer, svc UserCrpcServer, allmids map[string]crpc.OutsideHandler) {
	// avoid lint
	_ = allmids
	engine.RegisterHandler(_CrpcPathUserUserLogin, _User_UserLogin_CrpcHandler(svc.UserLogin))
	engine.RegisterHandler(_CrpcPathUserInviteProject, _User_InviteProject_CrpcHandler(svc.InviteProject))
	engine.RegisterHandler(_CrpcPathUserKickProject, _User_KickProject_CrpcHandler(svc.KickProject))
	engine.RegisterHandler(_CrpcPathUserSearchUsers, _User_SearchUsers_CrpcHandler(svc.SearchUsers))
	engine.RegisterHandler(_CrpcPathUserUpdateUser, _User_UpdateUser_CrpcHandler(svc.UpdateUser))
	engine.RegisterHandler(_CrpcPathUserCreateRole, _User_CreateRole_CrpcHandler(svc.CreateRole))
	engine.RegisterHandler(_CrpcPathUserSearchRoles, _User_SearchRoles_CrpcHandler(svc.SearchRoles))
	engine.RegisterHandler(_CrpcPathUserUpdateRole, _User_UpdateRole_CrpcHandler(svc.UpdateRole))
	engine.RegisterHandler(_CrpcPathUserDelRoles, _User_DelRoles_CrpcHandler(svc.DelRoles))
	engine.RegisterHandler(_CrpcPathUserAddUserRole, _User_AddUserRole_CrpcHandler(svc.AddUserRole))
	engine.RegisterHandler(_CrpcPathUserDelUserRole, _User_DelUserRole_CrpcHandler(svc.DelUserRole))
}
