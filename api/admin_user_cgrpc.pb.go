// Code generated by protoc-gen-go-cgrpc. DO NOT EDIT.
// version:
// 	protoc-gen-go-cgrpc v0.0.98<br />
// 	protoc              v4.25.3<br />
// source: api/admin_user.proto<br />

package api

import (
	context "context"
	cerror "github.com/chenjie199234/Corelib/cerror"
	cgrpc "github.com/chenjie199234/Corelib/cgrpc"
	log "github.com/chenjie199234/Corelib/log"
	grpc "google.golang.org/grpc"
)

var _CGrpcPathUserGetOauth2 = "/admin.user/get_oauth2"
var _CGrpcPathUserUserLogin = "/admin.user/user_login"
var _CGrpcPathUserLoginInfo = "/admin.user/login_info"
var _CGrpcPathUserInviteProject = "/admin.user/invite_project"
var _CGrpcPathUserKickProject = "/admin.user/kick_project"
var _CGrpcPathUserSearchUsers = "/admin.user/search_users"
var _CGrpcPathUserCreateRole = "/admin.user/create_role"
var _CGrpcPathUserSearchRoles = "/admin.user/search_roles"
var _CGrpcPathUserUpdateRole = "/admin.user/update_role"
var _CGrpcPathUserDelRoles = "/admin.user/del_roles"
var _CGrpcPathUserAddUserRole = "/admin.user/add_user_role"
var _CGrpcPathUserDelUserRole = "/admin.user/del_user_role"

type UserCGrpcClient interface {
	GetOauth2(context.Context, *GetOauth2Req, ...grpc.CallOption) (*GetOauth2Resp, error)
	UserLogin(context.Context, *UserLoginReq, ...grpc.CallOption) (*UserLoginResp, error)
	LoginInfo(context.Context, *LoginInfoReq, ...grpc.CallOption) (*LoginInfoResp, error)
	InviteProject(context.Context, *InviteProjectReq, ...grpc.CallOption) (*InviteProjectResp, error)
	KickProject(context.Context, *KickProjectReq, ...grpc.CallOption) (*KickProjectResp, error)
	SearchUsers(context.Context, *SearchUsersReq, ...grpc.CallOption) (*SearchUsersResp, error)
	CreateRole(context.Context, *CreateRoleReq, ...grpc.CallOption) (*CreateRoleResp, error)
	SearchRoles(context.Context, *SearchRolesReq, ...grpc.CallOption) (*SearchRolesResp, error)
	UpdateRole(context.Context, *UpdateRoleReq, ...grpc.CallOption) (*UpdateRoleResp, error)
	DelRoles(context.Context, *DelRolesReq, ...grpc.CallOption) (*DelRolesResp, error)
	AddUserRole(context.Context, *AddUserRoleReq, ...grpc.CallOption) (*AddUserRoleResp, error)
	DelUserRole(context.Context, *DelUserRoleReq, ...grpc.CallOption) (*DelUserRoleResp, error)
}

type userCGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewUserCGrpcClient(cc grpc.ClientConnInterface) UserCGrpcClient {
	return &userCGrpcClient{cc: cc}
}

func (c *userCGrpcClient) GetOauth2(ctx context.Context, req *GetOauth2Req, opts ...grpc.CallOption) (*GetOauth2Resp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	resp := new(GetOauth2Resp)
	if e := c.cc.Invoke(ctx, _CGrpcPathUserGetOauth2, req, resp, opts...); e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *userCGrpcClient) UserLogin(ctx context.Context, req *UserLoginReq, opts ...grpc.CallOption) (*UserLoginResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	resp := new(UserLoginResp)
	if e := c.cc.Invoke(ctx, _CGrpcPathUserUserLogin, req, resp, opts...); e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *userCGrpcClient) LoginInfo(ctx context.Context, req *LoginInfoReq, opts ...grpc.CallOption) (*LoginInfoResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	resp := new(LoginInfoResp)
	if e := c.cc.Invoke(ctx, _CGrpcPathUserLoginInfo, req, resp, opts...); e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *userCGrpcClient) InviteProject(ctx context.Context, req *InviteProjectReq, opts ...grpc.CallOption) (*InviteProjectResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	resp := new(InviteProjectResp)
	if e := c.cc.Invoke(ctx, _CGrpcPathUserInviteProject, req, resp, opts...); e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *userCGrpcClient) KickProject(ctx context.Context, req *KickProjectReq, opts ...grpc.CallOption) (*KickProjectResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	resp := new(KickProjectResp)
	if e := c.cc.Invoke(ctx, _CGrpcPathUserKickProject, req, resp, opts...); e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *userCGrpcClient) SearchUsers(ctx context.Context, req *SearchUsersReq, opts ...grpc.CallOption) (*SearchUsersResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	resp := new(SearchUsersResp)
	if e := c.cc.Invoke(ctx, _CGrpcPathUserSearchUsers, req, resp, opts...); e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *userCGrpcClient) CreateRole(ctx context.Context, req *CreateRoleReq, opts ...grpc.CallOption) (*CreateRoleResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	resp := new(CreateRoleResp)
	if e := c.cc.Invoke(ctx, _CGrpcPathUserCreateRole, req, resp, opts...); e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *userCGrpcClient) SearchRoles(ctx context.Context, req *SearchRolesReq, opts ...grpc.CallOption) (*SearchRolesResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	resp := new(SearchRolesResp)
	if e := c.cc.Invoke(ctx, _CGrpcPathUserSearchRoles, req, resp, opts...); e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *userCGrpcClient) UpdateRole(ctx context.Context, req *UpdateRoleReq, opts ...grpc.CallOption) (*UpdateRoleResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	resp := new(UpdateRoleResp)
	if e := c.cc.Invoke(ctx, _CGrpcPathUserUpdateRole, req, resp, opts...); e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *userCGrpcClient) DelRoles(ctx context.Context, req *DelRolesReq, opts ...grpc.CallOption) (*DelRolesResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	resp := new(DelRolesResp)
	if e := c.cc.Invoke(ctx, _CGrpcPathUserDelRoles, req, resp, opts...); e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *userCGrpcClient) AddUserRole(ctx context.Context, req *AddUserRoleReq, opts ...grpc.CallOption) (*AddUserRoleResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	resp := new(AddUserRoleResp)
	if e := c.cc.Invoke(ctx, _CGrpcPathUserAddUserRole, req, resp, opts...); e != nil {
		return nil, e
	}
	return resp, nil
}
func (c *userCGrpcClient) DelUserRole(ctx context.Context, req *DelUserRoleReq, opts ...grpc.CallOption) (*DelUserRoleResp, error) {
	if req == nil {
		return nil, cerror.ErrReq
	}
	resp := new(DelUserRoleResp)
	if e := c.cc.Invoke(ctx, _CGrpcPathUserDelUserRole, req, resp, opts...); e != nil {
		return nil, e
	}
	return resp, nil
}

type UserCGrpcServer interface {
	GetOauth2(context.Context, *GetOauth2Req) (*GetOauth2Resp, error)
	UserLogin(context.Context, *UserLoginReq) (*UserLoginResp, error)
	LoginInfo(context.Context, *LoginInfoReq) (*LoginInfoResp, error)
	InviteProject(context.Context, *InviteProjectReq) (*InviteProjectResp, error)
	KickProject(context.Context, *KickProjectReq) (*KickProjectResp, error)
	SearchUsers(context.Context, *SearchUsersReq) (*SearchUsersResp, error)
	CreateRole(context.Context, *CreateRoleReq) (*CreateRoleResp, error)
	SearchRoles(context.Context, *SearchRolesReq) (*SearchRolesResp, error)
	UpdateRole(context.Context, *UpdateRoleReq) (*UpdateRoleResp, error)
	DelRoles(context.Context, *DelRolesReq) (*DelRolesResp, error)
	AddUserRole(context.Context, *AddUserRoleReq) (*AddUserRoleResp, error)
	DelUserRole(context.Context, *DelUserRoleReq) (*DelUserRoleResp, error)
}

func _User_GetOauth2_CGrpcHandler(handler func(context.Context, *GetOauth2Req) (*GetOauth2Resp, error)) cgrpc.OutsideHandler {
	return func(ctx *cgrpc.Context) {
		req := new(GetOauth2Req)
		if e := ctx.DecodeReq(req); e != nil {
			log.Error(ctx, "[/admin.user/get_oauth2] decode failed")
			ctx.Abort(cerror.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/admin.user/get_oauth2] validate failed", log.String("validate", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(GetOauth2Resp)
		}
		ctx.Write(resp)
	}
}
func _User_UserLogin_CGrpcHandler(handler func(context.Context, *UserLoginReq) (*UserLoginResp, error)) cgrpc.OutsideHandler {
	return func(ctx *cgrpc.Context) {
		req := new(UserLoginReq)
		if e := ctx.DecodeReq(req); e != nil {
			log.Error(ctx, "[/admin.user/user_login] decode failed")
			ctx.Abort(cerror.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/admin.user/user_login] validate failed", log.String("validate", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(UserLoginResp)
		}
		ctx.Write(resp)
	}
}
func _User_LoginInfo_CGrpcHandler(handler func(context.Context, *LoginInfoReq) (*LoginInfoResp, error)) cgrpc.OutsideHandler {
	return func(ctx *cgrpc.Context) {
		req := new(LoginInfoReq)
		if e := ctx.DecodeReq(req); e != nil {
			log.Error(ctx, "[/admin.user/login_info] decode failed")
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(LoginInfoResp)
		}
		ctx.Write(resp)
	}
}
func _User_InviteProject_CGrpcHandler(handler func(context.Context, *InviteProjectReq) (*InviteProjectResp, error)) cgrpc.OutsideHandler {
	return func(ctx *cgrpc.Context) {
		req := new(InviteProjectReq)
		if e := ctx.DecodeReq(req); e != nil {
			log.Error(ctx, "[/admin.user/invite_project] decode failed")
			ctx.Abort(cerror.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/admin.user/invite_project] validate failed", log.String("validate", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(InviteProjectResp)
		}
		ctx.Write(resp)
	}
}
func _User_KickProject_CGrpcHandler(handler func(context.Context, *KickProjectReq) (*KickProjectResp, error)) cgrpc.OutsideHandler {
	return func(ctx *cgrpc.Context) {
		req := new(KickProjectReq)
		if e := ctx.DecodeReq(req); e != nil {
			log.Error(ctx, "[/admin.user/kick_project] decode failed")
			ctx.Abort(cerror.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/admin.user/kick_project] validate failed", log.String("validate", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(KickProjectResp)
		}
		ctx.Write(resp)
	}
}
func _User_SearchUsers_CGrpcHandler(handler func(context.Context, *SearchUsersReq) (*SearchUsersResp, error)) cgrpc.OutsideHandler {
	return func(ctx *cgrpc.Context) {
		req := new(SearchUsersReq)
		if e := ctx.DecodeReq(req); e != nil {
			log.Error(ctx, "[/admin.user/search_users] decode failed")
			ctx.Abort(cerror.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/admin.user/search_users] validate failed", log.String("validate", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(SearchUsersResp)
		}
		ctx.Write(resp)
	}
}
func _User_CreateRole_CGrpcHandler(handler func(context.Context, *CreateRoleReq) (*CreateRoleResp, error)) cgrpc.OutsideHandler {
	return func(ctx *cgrpc.Context) {
		req := new(CreateRoleReq)
		if e := ctx.DecodeReq(req); e != nil {
			log.Error(ctx, "[/admin.user/create_role] decode failed")
			ctx.Abort(cerror.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/admin.user/create_role] validate failed", log.String("validate", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(CreateRoleResp)
		}
		ctx.Write(resp)
	}
}
func _User_SearchRoles_CGrpcHandler(handler func(context.Context, *SearchRolesReq) (*SearchRolesResp, error)) cgrpc.OutsideHandler {
	return func(ctx *cgrpc.Context) {
		req := new(SearchRolesReq)
		if e := ctx.DecodeReq(req); e != nil {
			log.Error(ctx, "[/admin.user/search_roles] decode failed")
			ctx.Abort(cerror.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/admin.user/search_roles] validate failed", log.String("validate", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(SearchRolesResp)
		}
		ctx.Write(resp)
	}
}
func _User_UpdateRole_CGrpcHandler(handler func(context.Context, *UpdateRoleReq) (*UpdateRoleResp, error)) cgrpc.OutsideHandler {
	return func(ctx *cgrpc.Context) {
		req := new(UpdateRoleReq)
		if e := ctx.DecodeReq(req); e != nil {
			log.Error(ctx, "[/admin.user/update_role] decode failed")
			ctx.Abort(cerror.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/admin.user/update_role] validate failed", log.String("validate", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(UpdateRoleResp)
		}
		ctx.Write(resp)
	}
}
func _User_DelRoles_CGrpcHandler(handler func(context.Context, *DelRolesReq) (*DelRolesResp, error)) cgrpc.OutsideHandler {
	return func(ctx *cgrpc.Context) {
		req := new(DelRolesReq)
		if e := ctx.DecodeReq(req); e != nil {
			log.Error(ctx, "[/admin.user/del_roles] decode failed")
			ctx.Abort(cerror.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/admin.user/del_roles] validate failed", log.String("validate", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(DelRolesResp)
		}
		ctx.Write(resp)
	}
}
func _User_AddUserRole_CGrpcHandler(handler func(context.Context, *AddUserRoleReq) (*AddUserRoleResp, error)) cgrpc.OutsideHandler {
	return func(ctx *cgrpc.Context) {
		req := new(AddUserRoleReq)
		if e := ctx.DecodeReq(req); e != nil {
			log.Error(ctx, "[/admin.user/add_user_role] decode failed")
			ctx.Abort(cerror.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/admin.user/add_user_role] validate failed", log.String("validate", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(AddUserRoleResp)
		}
		ctx.Write(resp)
	}
}
func _User_DelUserRole_CGrpcHandler(handler func(context.Context, *DelUserRoleReq) (*DelUserRoleResp, error)) cgrpc.OutsideHandler {
	return func(ctx *cgrpc.Context) {
		req := new(DelUserRoleReq)
		if e := ctx.DecodeReq(req); e != nil {
			log.Error(ctx, "[/admin.user/del_user_role] decode failed")
			ctx.Abort(cerror.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/admin.user/del_user_role] validate failed", log.String("validate", errstr))
			ctx.Abort(cerror.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(DelUserRoleResp)
		}
		ctx.Write(resp)
	}
}
func RegisterUserCGrpcServer(engine *cgrpc.CGrpcServer, svc UserCGrpcServer, allmids map[string]cgrpc.OutsideHandler) {
	// avoid lint
	_ = allmids
	engine.RegisterHandler("admin.user", "get_oauth2", _User_GetOauth2_CGrpcHandler(svc.GetOauth2))
	engine.RegisterHandler("admin.user", "user_login", _User_UserLogin_CGrpcHandler(svc.UserLogin))
	engine.RegisterHandler("admin.user", "login_info", _User_LoginInfo_CGrpcHandler(svc.LoginInfo))
	engine.RegisterHandler("admin.user", "invite_project", _User_InviteProject_CGrpcHandler(svc.InviteProject))
	engine.RegisterHandler("admin.user", "kick_project", _User_KickProject_CGrpcHandler(svc.KickProject))
	engine.RegisterHandler("admin.user", "search_users", _User_SearchUsers_CGrpcHandler(svc.SearchUsers))
	engine.RegisterHandler("admin.user", "create_role", _User_CreateRole_CGrpcHandler(svc.CreateRole))
	engine.RegisterHandler("admin.user", "search_roles", _User_SearchRoles_CGrpcHandler(svc.SearchRoles))
	engine.RegisterHandler("admin.user", "update_role", _User_UpdateRole_CGrpcHandler(svc.UpdateRole))
	engine.RegisterHandler("admin.user", "del_roles", _User_DelRoles_CGrpcHandler(svc.DelRoles))
	engine.RegisterHandler("admin.user", "add_user_role", _User_AddUserRole_CGrpcHandler(svc.AddUserRole))
	engine.RegisterHandler("admin.user", "del_user_role", _User_DelUserRole_CGrpcHandler(svc.DelUserRole))
}
