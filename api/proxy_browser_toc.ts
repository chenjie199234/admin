// Code generated by protoc-gen-browser. DO NOT EDIT.
// version:
// 	protoc-gen-browser v0.0.77<br />
// 	protoc             v3.21.11<br />
// source: api/proxy.proto<br />

import Axios from "axios";

export interface Error{
	code: number;
	msg: string;
}

export interface TobReq{
	//Warning!!!Element type is uint32,be careful of sign(+) and overflow
	project_id: Array<number>|null|undefined;
	path: string;
	appname: string;
	groupname: string;
	data: string;
}
function TobReqToJson(msg: TobReq): string{
	let s: string="{"
	//project_id
	if(msg.project_id==null||msg.project_id==undefined){
		s+='"project_id":null,'
	}else if(msg.project_id.length==0){
		s+='"project_id":[],'
	}else{
		s+='"project_id":['
		for(let element of msg.project_id){
			if(element==null||element==undefined||!Number.isInteger(element)){
				throw 'element in TobReq.project_id must be integer'
			}
			if(element>4294967295||element<0){
				throw 'element in TobReq.project_id overflow'
			}
			s+=element+','
		}
		s=s.substr(0,s.length-1)+'],'
	}
	//path
	if(msg.path==null||msg.path==undefined){
		throw 'TobReq.path must be string'
	}else{
		s+='"path":"'+msg.path+'",'
	}
	//appname
	if(msg.appname==null||msg.appname==undefined){
		throw 'TobReq.appname must be string'
	}else{
		s+='"appname":"'+msg.appname+'",'
	}
	//groupname
	if(msg.groupname==null||msg.groupname==undefined){
		throw 'TobReq.groupname must be string'
	}else{
		s+='"groupname":"'+msg.groupname+'",'
	}
	//data
	if(msg.data==null||msg.data==undefined){
		throw 'TobReq.data must be string'
	}else{
		s+='"data":"'+msg.data+'",'
	}
	if(s.length==1){
		s+="}"
	}else{
		s=s.substr(0,s.length-1)+'}'
	}
	return s
}
export interface TobResp{
	data: string;
}
function JsonToTobResp(jsonobj: { [k:string]:any }): TobResp{
	let obj: TobResp={
		data:'',
	}
	//data
	if(jsonobj['data']!=null&&jsonobj['data']!=undefined){
		if(typeof jsonobj['data']!='string'){
			throw 'TobResp.data must be string'
		}
		obj['data']=jsonobj['data']
	}
	return obj
}
const _WebPathProxyTob: string ="/admin.proxy/tob";
//ToC means this is used for users
export class ProxyBrowserClientToC {
	constructor(host: string){
		if(host==null||host==undefined||host.length==0){
			throw "ProxyBrowserClientToC's host missing"
		}
		this.host=host
	}
	//timeout must be integer,timeout's unit is millisecond
	//don't set Content-Type in header
	tob(header: { [k: string]: string },req: TobReq,timeout: number,errorf: (arg: Error)=>void,successf: (arg: TobResp)=>void){
		if(!Number.isInteger(timeout)){
			throw 'timeout must be integer'
		}
		if(header==null||header==undefined){
			header={}
		}
		header["Content-Type"] = "application/json"
		let config={
			url:_WebPathProxyTob,
			method: "post",
			baseURL: this.host,
			headers: header,
			data: TobReqToJson(req),
			timeout: timeout,
		}
		Axios.request(config)
		.then(function(response){
			try{
				let obj:TobResp=JsonToTobResp(response.data)
				successf(obj)
			}catch(e){
				let err:Error={code:-1,msg:'response error'}
				errorf(err)
			}
		})
		.catch(function(error){
			if(error.response==undefined){
				errorf({code:-2,msg:error.message})
				return
			}
			let respdata=error.response.data
			let err:Error={code:-1,msg:''}
			if(respdata.code==undefined||typeof respdata.code!='number'||!Number.isInteger(respdata.code)||respdata.msg==undefined||typeof respdata.msg!='string'){
				err.msg=respdata
			}else{
				err.code=respdata.code
				err.msg=respdata.msg
			}
			errorf(err)
		})
	}
	private host: string
}
