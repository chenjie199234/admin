// Code generated by protoc-gen-browser. DO NOT EDIT.
// version:
// 	protoc-gen-browser v0.0.77<br />
// 	protoc             v4.23.1<br />
// source: api/adminstatus.proto<br />

import Axios from "axios";
import Long from "long";

export interface Error{
	code: number;
	msg: string;
}

export interface Pingreq{
	//Warning!!!Type is int64,be careful of sign(+,-)
	timestamp: Long;
}
function PingreqToForm(msg: Pingreq): string{
	let s: string=""
	//timestamp
	if(msg.timestamp==null||msg.timestamp==undefined){
		throw 'Pingreq.timestamp must be integer'
	}else if(msg.timestamp.lessThan(Long.MIN_VALUE)||msg.timestamp.greaterThan(Long.MAX_VALUE)){
		throw 'Pingreq.timestamp overflow'
	}else{
		s+='timestamp='+msg.timestamp.toString()+'&'
	}
	if(s.length!=0){
		s=s.substr(0,s.length-1)
	}
	return s
}
export interface Pingresp{
	//Warning!!!Type is int64,be careful of sign(+,-)
	client_timestamp: Long;
	//Warning!!!Type is int64,be careful of sign(+,-)
	server_timestamp: Long;
}
function JsonToPingresp(jsonobj: { [k:string]:any }): Pingresp{
	let obj: Pingresp={
		client_timestamp:Long.ZERO,
		server_timestamp:Long.ZERO,
	}
	//client_timestamp
	if(jsonobj['client_timestamp']!=null&&jsonobj['client_timestamp']!=undefined){
		if(typeof jsonobj['client_timestamp']=='number'){
			if(!Number.isInteger(jsonobj['client_timestamp'])){
				throw 'Pingresp.client_timestamp must be integer'
			}
			let tmp: Long=Long.ZERO
			try{
				tmp=Long.fromNumber(jsonobj['client_timestamp'],false)
			}catch(e){
				throw 'Pingresp.client_timestamp must be integer'
			}
			obj['client_timestamp']=tmp
		}else if(typeof jsonobj['client_timestamp']=='string'){
			let tmp:Long=Long.ZERO
			try{
				tmp=Long.fromString(jsonobj['client_timestamp'],false)
			}catch(e){
				throw 'Pingresp.client_timestamp must be integer'
			}
			if(tmp.toString()!=jsonobj['client_timestamp']){
				throw 'Pingresp.client_timestamp overflow'
			}
			obj['client_timestamp']=tmp
		}else{
			throw 'Pingresp.client_timestamp must be integer'
		}
	}
	//server_timestamp
	if(jsonobj['server_timestamp']!=null&&jsonobj['server_timestamp']!=undefined){
		if(typeof jsonobj['server_timestamp']=='number'){
			if(!Number.isInteger(jsonobj['server_timestamp'])){
				throw 'Pingresp.server_timestamp must be integer'
			}
			let tmp: Long=Long.ZERO
			try{
				tmp=Long.fromNumber(jsonobj['server_timestamp'],false)
			}catch(e){
				throw 'Pingresp.server_timestamp must be integer'
			}
			obj['server_timestamp']=tmp
		}else if(typeof jsonobj['server_timestamp']=='string'){
			let tmp:Long=Long.ZERO
			try{
				tmp=Long.fromString(jsonobj['server_timestamp'],false)
			}catch(e){
				throw 'Pingresp.server_timestamp must be integer'
			}
			if(tmp.toString()!=jsonobj['server_timestamp']){
				throw 'Pingresp.server_timestamp overflow'
			}
			obj['server_timestamp']=tmp
		}else{
			throw 'Pingresp.server_timestamp must be integer'
		}
	}
	return obj
}
const _WebPathStatusPing: string ="/admin.status/ping";
//ToC means this is used for users
export class StatusBrowserClientToC {
	constructor(host: string){
		if(host==null||host==undefined||host.length==0){
			throw "StatusBrowserClientToC's host missing"
		}
		this.host=host
	}
	//timeout must be integer,timeout's unit is millisecond
	//don't set Content-Type in header
	ping(header: { [k: string]: string },req: Pingreq,timeout: number,errorf: (arg: Error)=>void,successf: (arg: Pingresp)=>void){
		if(!Number.isInteger(timeout)){
			errorf({code:-2,msg:'timeout must be integer'})
			return
		}
		if(header==null||header==undefined){
			header={}
		}
		header["Content-Type"] = "application/x-www-form-urlencoded"
		let form: string=''
		try{
			form=PingreqToForm(req)
		}catch(e){
			errorf({code:-2,msg:''+e})
			return
		}
		let config={
			url:_WebPathStatusPing+'?'+form,
			method: "get",
			baseURL: this.host,
			headers: header,
			timeout: timeout,
		}
		Axios.request(config)
		.then(function(response: Axios.AxiosResponse){
			try{
				let obj:Pingresp=JsonToPingresp(response.data)
				successf(obj)
			}catch(e){
				let err:Error={code:-1,msg:'response error'}
				errorf(err)
			}
		})
		.catch(function(error: Axios.AxiosError){
			if(error.response==undefined){
				errorf({code:-2,msg:error.message})
				return
			}
			let respdata=error.response.data
			let err:Error={code:-1,msg:''}
			if(respdata.code==undefined||typeof respdata.code!='number'||!Number.isInteger(respdata.code)||respdata.msg==undefined||typeof respdata.msg!='string'){
				err.msg=respdata
			}else{
				err.code=respdata.code
				err.msg=respdata.msg
			}
			errorf(err)
		})
	}
	private host: string
}
