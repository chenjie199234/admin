syntax="proto3";

//this is the proto package name,all proto in this project must use this name as the proto package name
package admin;
//this is the golang's package name,all proto in this project must use this name as the golang's package name
option go_package="github.com/chenjie199234/admin/api;api";
//https://github.com/chenjie199234/Corelib/blob/main/pbex/pbex.proto
import "pbex/pbex.proto";

//this is the proto file for permission service
service permission{
	//rpc example(examplereq)returns(exampleresp){
	//	option (pbex.method)="get";
	//	option (pbex.method)="crpc";
	//	option (pbex.method)="grpc";//can be set to one of (get,delete,post,put,patch) or crpc or grpc
	//	option (pbex.web_midwares)="b";
	//	option (pbex.web_midwares)="c";
	//	option (pbex.web_midwares)="a";//this function on web protocol has 3 midwares,it's order is b,c,a
	//	option (pbex.crpc_midwares)="b";
	//	option (pbex.crpc_midwares)="c";
	//	option (pbex.crpc_midwares)="a";//this function on crpc protocol has 3 midwares,it's order is b,c,a
	//	option (pbex.cgrpc_midwares)="b";
	//	option (pbex.cgrpc_midwares)="c";
	//	option (pbex.cgrpc_midwares)="a";//this function on grpc protocol has 3 midwares,it's order is b,c,a
	//}

	rpc get_user_permission(get_user_permission_req)returns(get_user_permission_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="accesskey";
	}

	rpc update_user_permission(update_user_permission_req)returns(update_user_permission_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	rpc update_role_permission(update_role_permission_req)returns(update_role_permission_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	rpc add_node(add_node_req)returns(add_node_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	rpc update_node(update_node_req)returns(update_node_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	rpc move_node(move_node_req)returns(move_node_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	rpc del_node(del_node_req)returns(del_node_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	rpc list_user_node(list_user_node_req)returns(list_user_node_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	rpc list_role_node(list_role_node_req)returns(list_role_node_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	rpc list_project_node(list_project_node_req)returns(list_project_node_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
}
//req can be set with pbex extentions
//message examplereq{
	//int64 example_for_extentions=1[(pbex.int_gt)=1,(pbex.int_lt)=100];
//}
//resp's pbex extentions will be ignore
//message exampleresp{
	//int64 example_resp=1;
//}


message get_user_permission_req {
	string user_id=1[(pbex.string_bytes_len_not_eq)=0];
	//first element must be 0
	repeated uint32 node_id=2[(pbex.map_repeated_len_gt)=1];
}
message get_user_permission_resp {
	bool canread=1;
	bool canwrite=2;
	bool admin=3;
}
message update_user_permission_req {
	string user_id=1[(pbex.string_bytes_len_not_eq)=0];
	//first element must be 0
	repeated uint32 node_id=2[(pbex.map_repeated_len_gt)=1];
	//if admin is true,canread and canwrite will be ignore
	bool admin=3;
	//if admin is false,and canread is false too,means delete this user from this node
	//if admin is false,and canread is false and node_id's length is 1,means delete this user completely
	bool canread=4;
	//if canwrite is true,canread must be true too
	bool canwrite=5;
}
message update_user_permission_resp {

}
message update_role_permission_req {
	//first element must be 0
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string role_name=2[(pbex.string_bytes_len_not_eq)=0];
	//first element must be 0
	repeated uint32 node_id=3[(pbex.map_repeated_len_gt)=2];
	//if admin is true,canread and canwrite will be ignore
	bool admin=4;
	//if admin is false,and canread is false too,means delete this user from this node
	//if admin is false,and canread is false and node_id's length is 1,means delete this user completely
	bool canread=5;
	//if canwrite is true,canread must be true too
	bool canwrite=6;
}
message update_role_permission_resp {

}
message add_node_req {
	//first element must be 0
	repeated uint32 pnode_id=1[(pbex.map_repeated_len_gte)=2];
	string node_name=2[(pbex.string_bytes_len_not_eq)=0];
	string node_data=3;
}
message add_node_resp {
	repeated uint32 node_id=1;
}
message update_node_req {
	//first element must be 0
	repeated uint32 node_id=1[(pbex.map_repeated_len_gt)=2];
	string new_node_name=2[(pbex.string_bytes_len_not_eq)=0];//if didn't change,set this with the old value
	string new_node_data=3;//if didn't change,set this with the old value
}
message update_node_resp {

}
message move_node_req {
	//first element must be 0
	repeated uint32 node_id=1[(pbex.map_repeated_len_gt)=2];
	//first element must be 0
	repeated uint32 pnode_id=2[(pbex.map_repeated_len_gte)=2];
}
message move_node_resp {

}
message del_node_req {
	//first element must be 0
	repeated uint32 node_id=1[(pbex.map_repeated_len_gt)=2];
}
message del_node_resp {
}
message node_info {
	repeated uint32 node_id=1;
	string node_name=2;
	string node_data=3;
	bool canread=4;
	bool canwrite=5;
	bool admin=6;
	repeated node_info children=7;
}
message list_user_node_req {
	//first element must be 0
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string user_id=2;//if this is empty means return self's
	bool need_user_role_node=3;//false - only return user's base node,true - return user's base node and user's roles' node
}
message list_user_node_resp {
	node_info node=1;
}
message list_role_node_req {
	//first element must be 0
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string role_name=2[(pbex.string_bytes_len_not_eq)=0];
}
message list_role_node_resp {
	node_info node=1;
}
message list_project_node_req{
	//first element must be 0
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
}
message list_project_node_resp{
	//this will only return the node name,node data and children
	//other node's info will not return
	node_info node=1;
}
