syntax="proto3";

//this is the proto package name,all proto in this project must use this name as the proto package name
package admin;
//this is the golang's package name,all proto in this project must use this name as the golang's package name
option go_package="github.com/chenjie199234/admin/api;api";
//https://github.com/chenjie199234/Corelib/blob/main/pbex/pbex.proto
import "pbex/pbex.proto";

//this is the proto file for user service
service user{
	//rpc example(examplereq)returns(exampleresp){
	//	option (pbex.method)="get";//can be set to get,delete,post,put,patch
	//	option (pbex.web_midwares)="b";
	//	option (pbex.web_midwares)="c";
	//	option (pbex.web_midwares)="a";//this function on web protocol has 3 midwares,it's order is b,c,a
	//	option (pbex.crpc_midwares)="b";
	//	option (pbex.crpc_midwares)="c";
	//	option (pbex.crpc_midwares)="a";//this function on crpc protocol has 3 midwares,it's order is b,c,a
	//	option (pbex.cgrpc_midwares)="b";
	//	option (pbex.cgrpc_midwares)="c";
	//	option (pbex.cgrpc_midwares)="a";//this function on grpc protocol has 3 midwares,it's order is b,c,a
	//}

	rpc get_oauth2(get_oauth2_req)returns(get_oauth2_resp){
		option (pbex.method)="post";
	}

	rpc user_login(user_login_req)returns(user_login_resp){
		option (pbex.method)="post";
	}

	rpc login_info(login_info_req)returns(login_info_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	rpc invite_project(invite_project_req)returns(invite_project_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	rpc kick_project(kick_project_req)returns(kick_project_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	rpc search_users(search_users_req)returns(search_users_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	rpc create_role(create_role_req)returns(create_role_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	rpc search_roles(search_roles_req)returns(search_roles_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	rpc update_role(update_role_req)returns(update_role_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	rpc del_roles(del_roles_req)returns(del_roles_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	rpc add_user_role(add_user_role_req)returns(add_user_role_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	rpc del_user_role(del_user_role_req)returns(del_user_role_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
}
//req can be set with pbex extentions
//message examplereq{
	//int64 example_for_extentions=1[(pbex.int_gt)=1,(pbex.int_lt)=100];
//}
//resp's pbex extentions will be ignore
//message exampleresp{
	//int64 example_resp=1;
//}

message get_oauth2_req{
	string src_type=1[(pbex.string_bytes_in)="DingTalk",(pbex.string_bytes_in)="FeiShu"];
}
message get_oauth2_resp{
	string url=1;
}

message user_info {
	string user_id=1;
	string oauth2_user_name=2;
	uint32 ctime=3;//timestamp,uint:second
	repeated project_roles project_roles=4;
}
message project_roles{
	repeated uint32 project_id=1;
	repeated string roles=2;
}
message role_info {
	repeated uint32 project_id=1;
	string role_name=2;
	string comment=3;
	uint32 ctime=4;
}

message user_login_req {
	string src_type=1[(pbex.string_bytes_in)="DingTalk",(pbex.string_bytes_in)="FeiShu"];
	string code=2[(pbex.string_bytes_len_not_eq)=0];
}
message user_login_resp {
	string token=1;
}
message login_info_req{
}
message login_info_resp{
	user_info user=1;
}
message invite_project_req{
	//first element must be 0
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string user_id=2[(pbex.string_bytes_len_not_eq)=0];
}
message invite_project_resp{

}
message kick_project_req{
	//first element must be 0
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string user_id=2[(pbex.string_bytes_len_not_eq)=0];
}
message kick_project_resp{

}
message search_users_req {
	//first element must be 0
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string user_name=2;//fuzzy search
	//true - search users in the project,this require operator has read permission on this project's user control node
	//false - search all users(include users not in this project),this require operator has admin permission on this project's user control node
	bool only_project=3;
	uint32 page=4;//if page is 0,means return all result
}
message search_users_resp {
	repeated user_info users=1;//key userid,value userinfo(only contains the required project's roles)
	uint32 page=2;
	uint32 pagesize=3;
	uint32 totalsize=4;
}
message create_role_req {
	//first element must be 0
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string role_name=2[(pbex.string_bytes_len_not_eq)=0];
	string comment=3;
}
message create_role_resp {

}
message search_roles_req {
	//first element must be 0
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string role_name=2;//fuzzy search
	uint32 page=3;//page starts from 1,if page is 0,means return all result
}
message search_roles_resp {
	repeated role_info roles=1;
	uint32 page=2;
	uint32 pagesize=3;
	uint32 totalsize=4;
}
message update_role_req {
	//first element must be 0
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string role_name=2[(pbex.string_bytes_len_not_eq)=0];
	string new_comment=3;//if didn't change,set this with the old value
}
message update_role_resp {

}
message del_roles_req {
	//first element must be 0
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	repeated string role_names=2[(pbex.map_repeated_len_not_eq)=0,(pbex.string_bytes_len_not_eq)=0];
}
message del_roles_resp {

}
message add_user_role_req {
	//first element must be 0
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string user_id=2[(pbex.string_bytes_len_not_eq)=0];
	string role_name=3[(pbex.string_bytes_len_not_eq)=0];
}
message add_user_role_resp {

}
message del_user_role_req {
	//first element must be 0
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string user_id=2[(pbex.string_bytes_len_not_eq)=0];
	string role_name=3[(pbex.string_bytes_len_not_eq)=0];
}
message del_user_role_resp {

}
