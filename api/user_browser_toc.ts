// Code generated by protoc-gen-browser. DO NOT EDIT.
// version:
// 	protoc-gen-browser v0.0.77<br />
// 	protoc             v4.22.3<br />
// source: api/user.proto<br />

import Axios from "axios";

export interface Error{
	code: number;
	msg: string;
}

export interface AddUserRoleReq{
	//first element must be 0
	//Warning!!!Element type is uint32,be careful of sign(+) and overflow
	project_id: Array<number>|null|undefined;
	user_id: string;
	role_name: string;
}
function AddUserRoleReqToJson(msg: AddUserRoleReq): string{
	let s: string="{"
	//project_id
	if(msg.project_id==null||msg.project_id==undefined){
		s+='"project_id":null,'
	}else if(msg.project_id.length==0){
		s+='"project_id":[],'
	}else{
		s+='"project_id":['
		for(let element of msg.project_id){
			if(element==null||element==undefined||!Number.isInteger(element)){
				throw 'element in AddUserRoleReq.project_id must be integer'
			}
			if(element>4294967295||element<0){
				throw 'element in AddUserRoleReq.project_id overflow'
			}
			s+=element+','
		}
		s=s.substr(0,s.length-1)+'],'
	}
	//user_id
	if(msg.user_id==null||msg.user_id==undefined){
		throw 'AddUserRoleReq.user_id must be string'
	}else{
		//transfer the json escape
		let vv=JSON.stringify(msg.user_id)
		s+='"user_id":'+vv+','
	}
	//role_name
	if(msg.role_name==null||msg.role_name==undefined){
		throw 'AddUserRoleReq.role_name must be string'
	}else{
		//transfer the json escape
		let vv=JSON.stringify(msg.role_name)
		s+='"role_name":'+vv+','
	}
	if(s.length==1){
		s+="}"
	}else{
		s=s.substr(0,s.length-1)+'}'
	}
	return s
}
export interface AddUserRoleResp{
}
function JsonToAddUserRoleResp(jsonobj: { [k:string]:any }): AddUserRoleResp{
	let obj: AddUserRoleResp={
	}
	return obj
}
export interface CreateRoleReq{
	//first element must be 0
	//Warning!!!Element type is uint32,be careful of sign(+) and overflow
	project_id: Array<number>|null|undefined;
	role_name: string;
	comment: string;
}
function CreateRoleReqToJson(msg: CreateRoleReq): string{
	let s: string="{"
	//project_id
	if(msg.project_id==null||msg.project_id==undefined){
		s+='"project_id":null,'
	}else if(msg.project_id.length==0){
		s+='"project_id":[],'
	}else{
		s+='"project_id":['
		for(let element of msg.project_id){
			if(element==null||element==undefined||!Number.isInteger(element)){
				throw 'element in CreateRoleReq.project_id must be integer'
			}
			if(element>4294967295||element<0){
				throw 'element in CreateRoleReq.project_id overflow'
			}
			s+=element+','
		}
		s=s.substr(0,s.length-1)+'],'
	}
	//role_name
	if(msg.role_name==null||msg.role_name==undefined){
		throw 'CreateRoleReq.role_name must be string'
	}else{
		//transfer the json escape
		let vv=JSON.stringify(msg.role_name)
		s+='"role_name":'+vv+','
	}
	//comment
	if(msg.comment==null||msg.comment==undefined){
		throw 'CreateRoleReq.comment must be string'
	}else{
		//transfer the json escape
		let vv=JSON.stringify(msg.comment)
		s+='"comment":'+vv+','
	}
	if(s.length==1){
		s+="}"
	}else{
		s=s.substr(0,s.length-1)+'}'
	}
	return s
}
export interface CreateRoleResp{
}
function JsonToCreateRoleResp(jsonobj: { [k:string]:any }): CreateRoleResp{
	let obj: CreateRoleResp={
	}
	return obj
}
export interface DelRolesReq{
	//first element must be 0
	//Warning!!!Element type is uint32,be careful of sign(+) and overflow
	project_id: Array<number>|null|undefined;
	role_names: Array<string>|null|undefined;
}
function DelRolesReqToJson(msg: DelRolesReq): string{
	let s: string="{"
	//project_id
	if(msg.project_id==null||msg.project_id==undefined){
		s+='"project_id":null,'
	}else if(msg.project_id.length==0){
		s+='"project_id":[],'
	}else{
		s+='"project_id":['
		for(let element of msg.project_id){
			if(element==null||element==undefined||!Number.isInteger(element)){
				throw 'element in DelRolesReq.project_id must be integer'
			}
			if(element>4294967295||element<0){
				throw 'element in DelRolesReq.project_id overflow'
			}
			s+=element+','
		}
		s=s.substr(0,s.length-1)+'],'
	}
	//role_names
	if(msg.role_names==null||msg.role_names==undefined){
		s+='"role_names":null,'
	}else if(msg.role_names.length==0){
		s+='"role_names":[],'
	}else{
		s+='"role_names":['
		for(let element of msg.role_names){
			if(element==null||element==undefined){
				throw 'element in DelRolesReq.role_names must be string'
			}
			//transfer the json escape
			let vv=JSON.stringify(element)
			s+=vv+','
		}
		s=s.substr(0,s.length-1)+'],'
	}
	if(s.length==1){
		s+="}"
	}else{
		s=s.substr(0,s.length-1)+'}'
	}
	return s
}
export interface DelRolesResp{
}
function JsonToDelRolesResp(jsonobj: { [k:string]:any }): DelRolesResp{
	let obj: DelRolesResp={
	}
	return obj
}
export interface DelUserRoleReq{
	//first element must be 0
	//Warning!!!Element type is uint32,be careful of sign(+) and overflow
	project_id: Array<number>|null|undefined;
	user_id: string;
	role_name: string;
}
function DelUserRoleReqToJson(msg: DelUserRoleReq): string{
	let s: string="{"
	//project_id
	if(msg.project_id==null||msg.project_id==undefined){
		s+='"project_id":null,'
	}else if(msg.project_id.length==0){
		s+='"project_id":[],'
	}else{
		s+='"project_id":['
		for(let element of msg.project_id){
			if(element==null||element==undefined||!Number.isInteger(element)){
				throw 'element in DelUserRoleReq.project_id must be integer'
			}
			if(element>4294967295||element<0){
				throw 'element in DelUserRoleReq.project_id overflow'
			}
			s+=element+','
		}
		s=s.substr(0,s.length-1)+'],'
	}
	//user_id
	if(msg.user_id==null||msg.user_id==undefined){
		throw 'DelUserRoleReq.user_id must be string'
	}else{
		//transfer the json escape
		let vv=JSON.stringify(msg.user_id)
		s+='"user_id":'+vv+','
	}
	//role_name
	if(msg.role_name==null||msg.role_name==undefined){
		throw 'DelUserRoleReq.role_name must be string'
	}else{
		//transfer the json escape
		let vv=JSON.stringify(msg.role_name)
		s+='"role_name":'+vv+','
	}
	if(s.length==1){
		s+="}"
	}else{
		s=s.substr(0,s.length-1)+'}'
	}
	return s
}
export interface DelUserRoleResp{
}
function JsonToDelUserRoleResp(jsonobj: { [k:string]:any }): DelUserRoleResp{
	let obj: DelUserRoleResp={
	}
	return obj
}
export interface InviteProjectReq{
	//first element must be 0
	//Warning!!!Element type is uint32,be careful of sign(+) and overflow
	project_id: Array<number>|null|undefined;
	user_id: string;
}
function InviteProjectReqToJson(msg: InviteProjectReq): string{
	let s: string="{"
	//project_id
	if(msg.project_id==null||msg.project_id==undefined){
		s+='"project_id":null,'
	}else if(msg.project_id.length==0){
		s+='"project_id":[],'
	}else{
		s+='"project_id":['
		for(let element of msg.project_id){
			if(element==null||element==undefined||!Number.isInteger(element)){
				throw 'element in InviteProjectReq.project_id must be integer'
			}
			if(element>4294967295||element<0){
				throw 'element in InviteProjectReq.project_id overflow'
			}
			s+=element+','
		}
		s=s.substr(0,s.length-1)+'],'
	}
	//user_id
	if(msg.user_id==null||msg.user_id==undefined){
		throw 'InviteProjectReq.user_id must be string'
	}else{
		//transfer the json escape
		let vv=JSON.stringify(msg.user_id)
		s+='"user_id":'+vv+','
	}
	if(s.length==1){
		s+="}"
	}else{
		s=s.substr(0,s.length-1)+'}'
	}
	return s
}
export interface InviteProjectResp{
}
function JsonToInviteProjectResp(jsonobj: { [k:string]:any }): InviteProjectResp{
	let obj: InviteProjectResp={
	}
	return obj
}
export interface KickProjectReq{
	//first element must be 0
	//Warning!!!Element type is uint32,be careful of sign(+) and overflow
	project_id: Array<number>|null|undefined;
	user_id: string;
}
function KickProjectReqToJson(msg: KickProjectReq): string{
	let s: string="{"
	//project_id
	if(msg.project_id==null||msg.project_id==undefined){
		s+='"project_id":null,'
	}else if(msg.project_id.length==0){
		s+='"project_id":[],'
	}else{
		s+='"project_id":['
		for(let element of msg.project_id){
			if(element==null||element==undefined||!Number.isInteger(element)){
				throw 'element in KickProjectReq.project_id must be integer'
			}
			if(element>4294967295||element<0){
				throw 'element in KickProjectReq.project_id overflow'
			}
			s+=element+','
		}
		s=s.substr(0,s.length-1)+'],'
	}
	//user_id
	if(msg.user_id==null||msg.user_id==undefined){
		throw 'KickProjectReq.user_id must be string'
	}else{
		//transfer the json escape
		let vv=JSON.stringify(msg.user_id)
		s+='"user_id":'+vv+','
	}
	if(s.length==1){
		s+="}"
	}else{
		s=s.substr(0,s.length-1)+'}'
	}
	return s
}
export interface KickProjectResp{
}
function JsonToKickProjectResp(jsonobj: { [k:string]:any }): KickProjectResp{
	let obj: KickProjectResp={
	}
	return obj
}
export interface LoginInfoReq{
}
function LoginInfoReqToJson(msg: LoginInfoReq): string{
	let s: string="{"
	if(s.length==1){
		s+="}"
	}else{
		s=s.substr(0,s.length-1)+'}'
	}
	return s
}
export interface LoginInfoResp{
	user: UserInfo|null|undefined;
}
function JsonToLoginInfoResp(jsonobj: { [k:string]:any }): LoginInfoResp{
	let obj: LoginInfoResp={
		user:null,
	}
	//user
	if(jsonobj['user']!=null&&jsonobj['user']!=undefined){
		if(typeof jsonobj['user']!='object'){
			throw 'LoginInfoResp.user must be UserInfo'
		}
		obj['user']=JsonToUserInfo(jsonobj['user'])
	}
	return obj
}
export interface ProjectRoles{
	//Warning!!!Element type is uint32,be careful of sign(+) and overflow
	project_id: Array<number>|null|undefined;
	roles: Array<string>|null|undefined;
}
function JsonToProjectRoles(jsonobj: { [k:string]:any }): ProjectRoles{
	let obj: ProjectRoles={
		project_id:null,
		roles:null,
	}
	//project_id
	if(jsonobj['project_id']!=null&&jsonobj['project_id']!=undefined){
		if(!(jsonobj['project_id'] instanceof Array)){
			throw 'ProjectRoles.project_id must be Array<number>|null|undefined'
		}
		for(let element of jsonobj['project_id']){
			if(typeof element!='number'||!Number.isInteger(element)){
				throw 'element in ProjectRoles.project_id must be integer'
			}else if(element>4294967295||element<0){
				throw 'element in ProjectRoles.project_id overflow'
			}
			if(obj['project_id']==null){
				obj['project_id']=new Array<number>
			}
			obj['project_id'].push(element)
		}
	}
	//roles
	if(jsonobj['roles']!=null&&jsonobj['roles']!=undefined){
		if(!(jsonobj['roles'] instanceof Array)){
			throw 'ProjectRoles.roles must be Array<string>|null|undefined'
		}
		for(let element of jsonobj['roles']){
			if(typeof element!='string'){
				throw 'element in ProjectRoles.roles must be string'
			}
			if(obj['roles']==null){
				obj['roles']=new Array<string>
			}
			obj['roles'].push(element)
		}
	}
	return obj
}
export interface RoleInfo{
	//Warning!!!Element type is uint32,be careful of sign(+) and overflow
	project_id: Array<number>|null|undefined;
	role_name: string;
	comment: string;
	//Warning!!!Type is uint32,be careful of sign(+) and overflow
	ctime: number;
}
function JsonToRoleInfo(jsonobj: { [k:string]:any }): RoleInfo{
	let obj: RoleInfo={
		project_id:null,
		role_name:'',
		comment:'',
		ctime:0,
	}
	//project_id
	if(jsonobj['project_id']!=null&&jsonobj['project_id']!=undefined){
		if(!(jsonobj['project_id'] instanceof Array)){
			throw 'RoleInfo.project_id must be Array<number>|null|undefined'
		}
		for(let element of jsonobj['project_id']){
			if(typeof element!='number'||!Number.isInteger(element)){
				throw 'element in RoleInfo.project_id must be integer'
			}else if(element>4294967295||element<0){
				throw 'element in RoleInfo.project_id overflow'
			}
			if(obj['project_id']==null){
				obj['project_id']=new Array<number>
			}
			obj['project_id'].push(element)
		}
	}
	//role_name
	if(jsonobj['role_name']!=null&&jsonobj['role_name']!=undefined){
		if(typeof jsonobj['role_name']!='string'){
			throw 'RoleInfo.role_name must be string'
		}
		obj['role_name']=jsonobj['role_name']
	}
	//comment
	if(jsonobj['comment']!=null&&jsonobj['comment']!=undefined){
		if(typeof jsonobj['comment']!='string'){
			throw 'RoleInfo.comment must be string'
		}
		obj['comment']=jsonobj['comment']
	}
	//ctime
	if(jsonobj['ctime']!=null&&jsonobj['ctime']!=undefined){
		if(typeof jsonobj['ctime']!='number'||!Number.isInteger(jsonobj['ctime'])){
			throw 'RoleInfo.ctime must be integer'
		}else if(jsonobj['ctime']>4294967295||jsonobj['ctime']<0){
			throw 'RoleInfo.ctime overflow'
		}
		obj['ctime']=jsonobj['ctime']
	}
	return obj
}
export interface SearchRolesReq{
	//first element must be 0
	//Warning!!!Element type is uint32,be careful of sign(+) and overflow
	project_id: Array<number>|null|undefined;
	role_name: string;//fuzzy search
	//Warning!!!Type is uint32,be careful of sign(+) and overflow
	page: number;//page starts from 1,if page is 0,means return all result
}
function SearchRolesReqToJson(msg: SearchRolesReq): string{
	let s: string="{"
	//project_id
	if(msg.project_id==null||msg.project_id==undefined){
		s+='"project_id":null,'
	}else if(msg.project_id.length==0){
		s+='"project_id":[],'
	}else{
		s+='"project_id":['
		for(let element of msg.project_id){
			if(element==null||element==undefined||!Number.isInteger(element)){
				throw 'element in SearchRolesReq.project_id must be integer'
			}
			if(element>4294967295||element<0){
				throw 'element in SearchRolesReq.project_id overflow'
			}
			s+=element+','
		}
		s=s.substr(0,s.length-1)+'],'
	}
	//role_name
	if(msg.role_name==null||msg.role_name==undefined){
		throw 'SearchRolesReq.role_name must be string'
	}else{
		//transfer the json escape
		let vv=JSON.stringify(msg.role_name)
		s+='"role_name":'+vv+','
	}
	//page
	if(msg.page==null||msg.page==undefined||!Number.isInteger(msg.page)){
		throw 'SearchRolesReq.page must be integer'
	}else if(msg.page>4294967295||msg.page<0){
		throw 'SearchRolesReq.page overflow'
	}else{
		s+='"page":'+msg.page+','
	}
	if(s.length==1){
		s+="}"
	}else{
		s=s.substr(0,s.length-1)+'}'
	}
	return s
}
export interface SearchRolesResp{
	roles: Array<RoleInfo|null|undefined>|null|undefined;
	//Warning!!!Type is uint32,be careful of sign(+) and overflow
	page: number;
	//Warning!!!Type is uint32,be careful of sign(+) and overflow
	pagesize: number;
	//Warning!!!Type is uint32,be careful of sign(+) and overflow
	totalsize: number;
}
function JsonToSearchRolesResp(jsonobj: { [k:string]:any }): SearchRolesResp{
	let obj: SearchRolesResp={
		roles:null,
		page:0,
		pagesize:0,
		totalsize:0,
	}
	//roles
	if(jsonobj['roles']!=null&&jsonobj['roles']!=undefined){
		if(!(jsonobj['roles'] instanceof Array)){
			throw 'SearchRolesResp.roles must be Array<RoleInfo>|null|undefined'
		}
		for(let element of jsonobj['roles']){
			if(typeof element!='object'){
				throw 'element in SearchRolesResp.roles must be RoleInfo'
			}
			if(obj['roles']==null){
				obj['roles']=new Array<RoleInfo>
			}
			obj['roles'].push(JsonToRoleInfo(element))
		}
	}
	//page
	if(jsonobj['page']!=null&&jsonobj['page']!=undefined){
		if(typeof jsonobj['page']!='number'||!Number.isInteger(jsonobj['page'])){
			throw 'SearchRolesResp.page must be integer'
		}else if(jsonobj['page']>4294967295||jsonobj['page']<0){
			throw 'SearchRolesResp.page overflow'
		}
		obj['page']=jsonobj['page']
	}
	//pagesize
	if(jsonobj['pagesize']!=null&&jsonobj['pagesize']!=undefined){
		if(typeof jsonobj['pagesize']!='number'||!Number.isInteger(jsonobj['pagesize'])){
			throw 'SearchRolesResp.pagesize must be integer'
		}else if(jsonobj['pagesize']>4294967295||jsonobj['pagesize']<0){
			throw 'SearchRolesResp.pagesize overflow'
		}
		obj['pagesize']=jsonobj['pagesize']
	}
	//totalsize
	if(jsonobj['totalsize']!=null&&jsonobj['totalsize']!=undefined){
		if(typeof jsonobj['totalsize']!='number'||!Number.isInteger(jsonobj['totalsize'])){
			throw 'SearchRolesResp.totalsize must be integer'
		}else if(jsonobj['totalsize']>4294967295||jsonobj['totalsize']<0){
			throw 'SearchRolesResp.totalsize overflow'
		}
		obj['totalsize']=jsonobj['totalsize']
	}
	return obj
}
export interface SearchUsersReq{
	//first element must be 0
	//Warning!!!Element type is uint32,be careful of sign(+) and overflow
	project_id: Array<number>|null|undefined;
	user_name: string;//fuzzy search
	//true - search users in the project,this require operator has read permission on this project's user control node
	//false - search all users(include users not in this project),this require operator has admin permission on this project's user control node
	only_project: boolean;
	//Warning!!!Type is uint32,be careful of sign(+) and overflow
	page: number;//if page is 0,means return all result
}
function SearchUsersReqToJson(msg: SearchUsersReq): string{
	let s: string="{"
	//project_id
	if(msg.project_id==null||msg.project_id==undefined){
		s+='"project_id":null,'
	}else if(msg.project_id.length==0){
		s+='"project_id":[],'
	}else{
		s+='"project_id":['
		for(let element of msg.project_id){
			if(element==null||element==undefined||!Number.isInteger(element)){
				throw 'element in SearchUsersReq.project_id must be integer'
			}
			if(element>4294967295||element<0){
				throw 'element in SearchUsersReq.project_id overflow'
			}
			s+=element+','
		}
		s=s.substr(0,s.length-1)+'],'
	}
	//user_name
	if(msg.user_name==null||msg.user_name==undefined){
		throw 'SearchUsersReq.user_name must be string'
	}else{
		//transfer the json escape
		let vv=JSON.stringify(msg.user_name)
		s+='"user_name":'+vv+','
	}
	//only_project
	if(msg.only_project==null||msg.only_project==undefined){
		throw 'SearchUsersReq.only_project must be boolean'
	}else{
		s+='"only_project":'+msg.only_project+','
	}
	//page
	if(msg.page==null||msg.page==undefined||!Number.isInteger(msg.page)){
		throw 'SearchUsersReq.page must be integer'
	}else if(msg.page>4294967295||msg.page<0){
		throw 'SearchUsersReq.page overflow'
	}else{
		s+='"page":'+msg.page+','
	}
	if(s.length==1){
		s+="}"
	}else{
		s=s.substr(0,s.length-1)+'}'
	}
	return s
}
export interface SearchUsersResp{
	users: Array<UserInfo|null|undefined>|null|undefined;//key userid,value username
	//Warning!!!Type is uint32,be careful of sign(+) and overflow
	page: number;
	//Warning!!!Type is uint32,be careful of sign(+) and overflow
	pagesize: number;
	//Warning!!!Type is uint32,be careful of sign(+) and overflow
	totalsize: number;
}
function JsonToSearchUsersResp(jsonobj: { [k:string]:any }): SearchUsersResp{
	let obj: SearchUsersResp={
		users:null,
		page:0,
		pagesize:0,
		totalsize:0,
	}
	//users
	if(jsonobj['users']!=null&&jsonobj['users']!=undefined){
		if(!(jsonobj['users'] instanceof Array)){
			throw 'SearchUsersResp.users must be Array<UserInfo>|null|undefined'
		}
		for(let element of jsonobj['users']){
			if(typeof element!='object'){
				throw 'element in SearchUsersResp.users must be UserInfo'
			}
			if(obj['users']==null){
				obj['users']=new Array<UserInfo>
			}
			obj['users'].push(JsonToUserInfo(element))
		}
	}
	//page
	if(jsonobj['page']!=null&&jsonobj['page']!=undefined){
		if(typeof jsonobj['page']!='number'||!Number.isInteger(jsonobj['page'])){
			throw 'SearchUsersResp.page must be integer'
		}else if(jsonobj['page']>4294967295||jsonobj['page']<0){
			throw 'SearchUsersResp.page overflow'
		}
		obj['page']=jsonobj['page']
	}
	//pagesize
	if(jsonobj['pagesize']!=null&&jsonobj['pagesize']!=undefined){
		if(typeof jsonobj['pagesize']!='number'||!Number.isInteger(jsonobj['pagesize'])){
			throw 'SearchUsersResp.pagesize must be integer'
		}else if(jsonobj['pagesize']>4294967295||jsonobj['pagesize']<0){
			throw 'SearchUsersResp.pagesize overflow'
		}
		obj['pagesize']=jsonobj['pagesize']
	}
	//totalsize
	if(jsonobj['totalsize']!=null&&jsonobj['totalsize']!=undefined){
		if(typeof jsonobj['totalsize']!='number'||!Number.isInteger(jsonobj['totalsize'])){
			throw 'SearchUsersResp.totalsize must be integer'
		}else if(jsonobj['totalsize']>4294967295||jsonobj['totalsize']<0){
			throw 'SearchUsersResp.totalsize overflow'
		}
		obj['totalsize']=jsonobj['totalsize']
	}
	return obj
}
export interface UpdateRoleReq{
	//first element must be 0
	//Warning!!!Element type is uint32,be careful of sign(+) and overflow
	project_id: Array<number>|null|undefined;
	role_name: string;
	new_comment: string;//if didn't change,set this with the old value
}
function UpdateRoleReqToJson(msg: UpdateRoleReq): string{
	let s: string="{"
	//project_id
	if(msg.project_id==null||msg.project_id==undefined){
		s+='"project_id":null,'
	}else if(msg.project_id.length==0){
		s+='"project_id":[],'
	}else{
		s+='"project_id":['
		for(let element of msg.project_id){
			if(element==null||element==undefined||!Number.isInteger(element)){
				throw 'element in UpdateRoleReq.project_id must be integer'
			}
			if(element>4294967295||element<0){
				throw 'element in UpdateRoleReq.project_id overflow'
			}
			s+=element+','
		}
		s=s.substr(0,s.length-1)+'],'
	}
	//role_name
	if(msg.role_name==null||msg.role_name==undefined){
		throw 'UpdateRoleReq.role_name must be string'
	}else{
		//transfer the json escape
		let vv=JSON.stringify(msg.role_name)
		s+='"role_name":'+vv+','
	}
	//new_comment
	if(msg.new_comment==null||msg.new_comment==undefined){
		throw 'UpdateRoleReq.new_comment must be string'
	}else{
		//transfer the json escape
		let vv=JSON.stringify(msg.new_comment)
		s+='"new_comment":'+vv+','
	}
	if(s.length==1){
		s+="}"
	}else{
		s=s.substr(0,s.length-1)+'}'
	}
	return s
}
export interface UpdateRoleResp{
}
function JsonToUpdateRoleResp(jsonobj: { [k:string]:any }): UpdateRoleResp{
	let obj: UpdateRoleResp={
	}
	return obj
}
export interface UpdateUserReq{
	user_id: string;
	new_user_name: string;//if didn't change,set this with the old value
	new_department: Array<string>|null|undefined;//if didn't change,set this with the old value
}
function UpdateUserReqToJson(msg: UpdateUserReq): string{
	let s: string="{"
	//user_id
	if(msg.user_id==null||msg.user_id==undefined){
		throw 'UpdateUserReq.user_id must be string'
	}else{
		//transfer the json escape
		let vv=JSON.stringify(msg.user_id)
		s+='"user_id":'+vv+','
	}
	//new_user_name
	if(msg.new_user_name==null||msg.new_user_name==undefined){
		throw 'UpdateUserReq.new_user_name must be string'
	}else{
		//transfer the json escape
		let vv=JSON.stringify(msg.new_user_name)
		s+='"new_user_name":'+vv+','
	}
	//new_department
	if(msg.new_department==null||msg.new_department==undefined){
		s+='"new_department":null,'
	}else if(msg.new_department.length==0){
		s+='"new_department":[],'
	}else{
		s+='"new_department":['
		for(let element of msg.new_department){
			if(element==null||element==undefined){
				throw 'element in UpdateUserReq.new_department must be string'
			}
			//transfer the json escape
			let vv=JSON.stringify(element)
			s+=vv+','
		}
		s=s.substr(0,s.length-1)+'],'
	}
	if(s.length==1){
		s+="}"
	}else{
		s=s.substr(0,s.length-1)+'}'
	}
	return s
}
export interface UpdateUserResp{
}
function JsonToUpdateUserResp(jsonobj: { [k:string]:any }): UpdateUserResp{
	let obj: UpdateUserResp={
	}
	return obj
}
export interface UserInfo{
	user_id: string;
	user_name: string;
	department: Array<string>|null|undefined;
	//Warning!!!Type is uint32,be careful of sign(+) and overflow
	ctime: number;//timestamp,uint:second
	project_roles: Array<ProjectRoles|null|undefined>|null|undefined;
}
function JsonToUserInfo(jsonobj: { [k:string]:any }): UserInfo{
	let obj: UserInfo={
		user_id:'',
		user_name:'',
		department:null,
		ctime:0,
		project_roles:null,
	}
	//user_id
	if(jsonobj['user_id']!=null&&jsonobj['user_id']!=undefined){
		if(typeof jsonobj['user_id']!='string'){
			throw 'UserInfo.user_id must be string'
		}
		obj['user_id']=jsonobj['user_id']
	}
	//user_name
	if(jsonobj['user_name']!=null&&jsonobj['user_name']!=undefined){
		if(typeof jsonobj['user_name']!='string'){
			throw 'UserInfo.user_name must be string'
		}
		obj['user_name']=jsonobj['user_name']
	}
	//department
	if(jsonobj['department']!=null&&jsonobj['department']!=undefined){
		if(!(jsonobj['department'] instanceof Array)){
			throw 'UserInfo.department must be Array<string>|null|undefined'
		}
		for(let element of jsonobj['department']){
			if(typeof element!='string'){
				throw 'element in UserInfo.department must be string'
			}
			if(obj['department']==null){
				obj['department']=new Array<string>
			}
			obj['department'].push(element)
		}
	}
	//ctime
	if(jsonobj['ctime']!=null&&jsonobj['ctime']!=undefined){
		if(typeof jsonobj['ctime']!='number'||!Number.isInteger(jsonobj['ctime'])){
			throw 'UserInfo.ctime must be integer'
		}else if(jsonobj['ctime']>4294967295||jsonobj['ctime']<0){
			throw 'UserInfo.ctime overflow'
		}
		obj['ctime']=jsonobj['ctime']
	}
	//project_roles
	if(jsonobj['project_roles']!=null&&jsonobj['project_roles']!=undefined){
		if(!(jsonobj['project_roles'] instanceof Array)){
			throw 'UserInfo.project_roles must be Array<ProjectRoles>|null|undefined'
		}
		for(let element of jsonobj['project_roles']){
			if(typeof element!='object'){
				throw 'element in UserInfo.project_roles must be ProjectRoles'
			}
			if(obj['project_roles']==null){
				obj['project_roles']=new Array<ProjectRoles>
			}
			obj['project_roles'].push(JsonToProjectRoles(element))
		}
	}
	return obj
}
export interface UserLoginReq{
}
function UserLoginReqToJson(msg: UserLoginReq): string{
	let s: string="{"
	if(s.length==1){
		s+="}"
	}else{
		s=s.substr(0,s.length-1)+'}'
	}
	return s
}
export interface UserLoginResp{
	token: string;
}
function JsonToUserLoginResp(jsonobj: { [k:string]:any }): UserLoginResp{
	let obj: UserLoginResp={
		token:'',
	}
	//token
	if(jsonobj['token']!=null&&jsonobj['token']!=undefined){
		if(typeof jsonobj['token']!='string'){
			throw 'UserLoginResp.token must be string'
		}
		obj['token']=jsonobj['token']
	}
	return obj
}
const _WebPathUserUserLogin: string ="/admin.user/user_login";
const _WebPathUserLoginInfo: string ="/admin.user/login_info";
const _WebPathUserInviteProject: string ="/admin.user/invite_project";
const _WebPathUserKickProject: string ="/admin.user/kick_project";
const _WebPathUserSearchUsers: string ="/admin.user/search_users";
const _WebPathUserUpdateUser: string ="/admin.user/update_user";
const _WebPathUserCreateRole: string ="/admin.user/create_role";
const _WebPathUserSearchRoles: string ="/admin.user/search_roles";
const _WebPathUserUpdateRole: string ="/admin.user/update_role";
const _WebPathUserDelRoles: string ="/admin.user/del_roles";
const _WebPathUserAddUserRole: string ="/admin.user/add_user_role";
const _WebPathUserDelUserRole: string ="/admin.user/del_user_role";
//ToC means this is used for users
export class UserBrowserClientToC {
	constructor(host: string){
		if(host==null||host==undefined||host.length==0){
			throw "UserBrowserClientToC's host missing"
		}
		this.host=host
	}
	//timeout must be integer,timeout's unit is millisecond
	//don't set Content-Type in header
	user_login(header: { [k: string]: string },req: UserLoginReq,timeout: number,errorf: (arg: Error)=>void,successf: (arg: UserLoginResp)=>void){
		if(!Number.isInteger(timeout)){
			errorf({code:-2,msg:'timeout must be integer'})
			return
		}
		if(header==null||header==undefined){
			header={}
		}
		header["Content-Type"] = "application/json"
		let body: string=''
		try{
			body=UserLoginReqToJson(req)
		}catch(e){
			errorf({code:-2,msg:e})
			return
		}
		let config={
			url:_WebPathUserUserLogin,
			method: "post",
			baseURL: this.host,
			headers: header,
			data: body,
			timeout: timeout,
		}
		Axios.request(config)
		.then(function(response){
			try{
				let obj:UserLoginResp=JsonToUserLoginResp(response.data)
				successf(obj)
			}catch(e){
				let err:Error={code:-1,msg:'response error'}
				errorf(err)
			}
		})
		.catch(function(error){
			if(error.response==undefined){
				errorf({code:-2,msg:error.message})
				return
			}
			let respdata=error.response.data
			let err:Error={code:-1,msg:''}
			if(respdata.code==undefined||typeof respdata.code!='number'||!Number.isInteger(respdata.code)||respdata.msg==undefined||typeof respdata.msg!='string'){
				err.msg=respdata
			}else{
				err.code=respdata.code
				err.msg=respdata.msg
			}
			errorf(err)
		})
	}
	//timeout must be integer,timeout's unit is millisecond
	//don't set Content-Type in header
	login_info(header: { [k: string]: string },req: LoginInfoReq,timeout: number,errorf: (arg: Error)=>void,successf: (arg: LoginInfoResp)=>void){
		if(!Number.isInteger(timeout)){
			errorf({code:-2,msg:'timeout must be integer'})
			return
		}
		if(header==null||header==undefined){
			header={}
		}
		header["Content-Type"] = "application/json"
		let body: string=''
		try{
			body=LoginInfoReqToJson(req)
		}catch(e){
			errorf({code:-2,msg:e})
			return
		}
		let config={
			url:_WebPathUserLoginInfo,
			method: "post",
			baseURL: this.host,
			headers: header,
			data: body,
			timeout: timeout,
		}
		Axios.request(config)
		.then(function(response){
			try{
				let obj:LoginInfoResp=JsonToLoginInfoResp(response.data)
				successf(obj)
			}catch(e){
				let err:Error={code:-1,msg:'response error'}
				errorf(err)
			}
		})
		.catch(function(error){
			if(error.response==undefined){
				errorf({code:-2,msg:error.message})
				return
			}
			let respdata=error.response.data
			let err:Error={code:-1,msg:''}
			if(respdata.code==undefined||typeof respdata.code!='number'||!Number.isInteger(respdata.code)||respdata.msg==undefined||typeof respdata.msg!='string'){
				err.msg=respdata
			}else{
				err.code=respdata.code
				err.msg=respdata.msg
			}
			errorf(err)
		})
	}
	//timeout must be integer,timeout's unit is millisecond
	//don't set Content-Type in header
	invite_project(header: { [k: string]: string },req: InviteProjectReq,timeout: number,errorf: (arg: Error)=>void,successf: (arg: InviteProjectResp)=>void){
		if(!Number.isInteger(timeout)){
			errorf({code:-2,msg:'timeout must be integer'})
			return
		}
		if(header==null||header==undefined){
			header={}
		}
		header["Content-Type"] = "application/json"
		let body: string=''
		try{
			body=InviteProjectReqToJson(req)
		}catch(e){
			errorf({code:-2,msg:e})
			return
		}
		let config={
			url:_WebPathUserInviteProject,
			method: "post",
			baseURL: this.host,
			headers: header,
			data: body,
			timeout: timeout,
		}
		Axios.request(config)
		.then(function(response){
			try{
				let obj:InviteProjectResp=JsonToInviteProjectResp(response.data)
				successf(obj)
			}catch(e){
				let err:Error={code:-1,msg:'response error'}
				errorf(err)
			}
		})
		.catch(function(error){
			if(error.response==undefined){
				errorf({code:-2,msg:error.message})
				return
			}
			let respdata=error.response.data
			let err:Error={code:-1,msg:''}
			if(respdata.code==undefined||typeof respdata.code!='number'||!Number.isInteger(respdata.code)||respdata.msg==undefined||typeof respdata.msg!='string'){
				err.msg=respdata
			}else{
				err.code=respdata.code
				err.msg=respdata.msg
			}
			errorf(err)
		})
	}
	//timeout must be integer,timeout's unit is millisecond
	//don't set Content-Type in header
	kick_project(header: { [k: string]: string },req: KickProjectReq,timeout: number,errorf: (arg: Error)=>void,successf: (arg: KickProjectResp)=>void){
		if(!Number.isInteger(timeout)){
			errorf({code:-2,msg:'timeout must be integer'})
			return
		}
		if(header==null||header==undefined){
			header={}
		}
		header["Content-Type"] = "application/json"
		let body: string=''
		try{
			body=KickProjectReqToJson(req)
		}catch(e){
			errorf({code:-2,msg:e})
			return
		}
		let config={
			url:_WebPathUserKickProject,
			method: "post",
			baseURL: this.host,
			headers: header,
			data: body,
			timeout: timeout,
		}
		Axios.request(config)
		.then(function(response){
			try{
				let obj:KickProjectResp=JsonToKickProjectResp(response.data)
				successf(obj)
			}catch(e){
				let err:Error={code:-1,msg:'response error'}
				errorf(err)
			}
		})
		.catch(function(error){
			if(error.response==undefined){
				errorf({code:-2,msg:error.message})
				return
			}
			let respdata=error.response.data
			let err:Error={code:-1,msg:''}
			if(respdata.code==undefined||typeof respdata.code!='number'||!Number.isInteger(respdata.code)||respdata.msg==undefined||typeof respdata.msg!='string'){
				err.msg=respdata
			}else{
				err.code=respdata.code
				err.msg=respdata.msg
			}
			errorf(err)
		})
	}
	//timeout must be integer,timeout's unit is millisecond
	//don't set Content-Type in header
	search_users(header: { [k: string]: string },req: SearchUsersReq,timeout: number,errorf: (arg: Error)=>void,successf: (arg: SearchUsersResp)=>void){
		if(!Number.isInteger(timeout)){
			errorf({code:-2,msg:'timeout must be integer'})
			return
		}
		if(header==null||header==undefined){
			header={}
		}
		header["Content-Type"] = "application/json"
		let body: string=''
		try{
			body=SearchUsersReqToJson(req)
		}catch(e){
			errorf({code:-2,msg:e})
			return
		}
		let config={
			url:_WebPathUserSearchUsers,
			method: "post",
			baseURL: this.host,
			headers: header,
			data: body,
			timeout: timeout,
		}
		Axios.request(config)
		.then(function(response){
			try{
				let obj:SearchUsersResp=JsonToSearchUsersResp(response.data)
				successf(obj)
			}catch(e){
				let err:Error={code:-1,msg:'response error'}
				errorf(err)
			}
		})
		.catch(function(error){
			if(error.response==undefined){
				errorf({code:-2,msg:error.message})
				return
			}
			let respdata=error.response.data
			let err:Error={code:-1,msg:''}
			if(respdata.code==undefined||typeof respdata.code!='number'||!Number.isInteger(respdata.code)||respdata.msg==undefined||typeof respdata.msg!='string'){
				err.msg=respdata
			}else{
				err.code=respdata.code
				err.msg=respdata.msg
			}
			errorf(err)
		})
	}
	//timeout must be integer,timeout's unit is millisecond
	//don't set Content-Type in header
	update_user(header: { [k: string]: string },req: UpdateUserReq,timeout: number,errorf: (arg: Error)=>void,successf: (arg: UpdateUserResp)=>void){
		if(!Number.isInteger(timeout)){
			errorf({code:-2,msg:'timeout must be integer'})
			return
		}
		if(header==null||header==undefined){
			header={}
		}
		header["Content-Type"] = "application/json"
		let body: string=''
		try{
			body=UpdateUserReqToJson(req)
		}catch(e){
			errorf({code:-2,msg:e})
			return
		}
		let config={
			url:_WebPathUserUpdateUser,
			method: "post",
			baseURL: this.host,
			headers: header,
			data: body,
			timeout: timeout,
		}
		Axios.request(config)
		.then(function(response){
			try{
				let obj:UpdateUserResp=JsonToUpdateUserResp(response.data)
				successf(obj)
			}catch(e){
				let err:Error={code:-1,msg:'response error'}
				errorf(err)
			}
		})
		.catch(function(error){
			if(error.response==undefined){
				errorf({code:-2,msg:error.message})
				return
			}
			let respdata=error.response.data
			let err:Error={code:-1,msg:''}
			if(respdata.code==undefined||typeof respdata.code!='number'||!Number.isInteger(respdata.code)||respdata.msg==undefined||typeof respdata.msg!='string'){
				err.msg=respdata
			}else{
				err.code=respdata.code
				err.msg=respdata.msg
			}
			errorf(err)
		})
	}
	//timeout must be integer,timeout's unit is millisecond
	//don't set Content-Type in header
	create_role(header: { [k: string]: string },req: CreateRoleReq,timeout: number,errorf: (arg: Error)=>void,successf: (arg: CreateRoleResp)=>void){
		if(!Number.isInteger(timeout)){
			errorf({code:-2,msg:'timeout must be integer'})
			return
		}
		if(header==null||header==undefined){
			header={}
		}
		header["Content-Type"] = "application/json"
		let body: string=''
		try{
			body=CreateRoleReqToJson(req)
		}catch(e){
			errorf({code:-2,msg:e})
			return
		}
		let config={
			url:_WebPathUserCreateRole,
			method: "post",
			baseURL: this.host,
			headers: header,
			data: body,
			timeout: timeout,
		}
		Axios.request(config)
		.then(function(response){
			try{
				let obj:CreateRoleResp=JsonToCreateRoleResp(response.data)
				successf(obj)
			}catch(e){
				let err:Error={code:-1,msg:'response error'}
				errorf(err)
			}
		})
		.catch(function(error){
			if(error.response==undefined){
				errorf({code:-2,msg:error.message})
				return
			}
			let respdata=error.response.data
			let err:Error={code:-1,msg:''}
			if(respdata.code==undefined||typeof respdata.code!='number'||!Number.isInteger(respdata.code)||respdata.msg==undefined||typeof respdata.msg!='string'){
				err.msg=respdata
			}else{
				err.code=respdata.code
				err.msg=respdata.msg
			}
			errorf(err)
		})
	}
	//timeout must be integer,timeout's unit is millisecond
	//don't set Content-Type in header
	search_roles(header: { [k: string]: string },req: SearchRolesReq,timeout: number,errorf: (arg: Error)=>void,successf: (arg: SearchRolesResp)=>void){
		if(!Number.isInteger(timeout)){
			errorf({code:-2,msg:'timeout must be integer'})
			return
		}
		if(header==null||header==undefined){
			header={}
		}
		header["Content-Type"] = "application/json"
		let body: string=''
		try{
			body=SearchRolesReqToJson(req)
		}catch(e){
			errorf({code:-2,msg:e})
			return
		}
		let config={
			url:_WebPathUserSearchRoles,
			method: "post",
			baseURL: this.host,
			headers: header,
			data: body,
			timeout: timeout,
		}
		Axios.request(config)
		.then(function(response){
			try{
				let obj:SearchRolesResp=JsonToSearchRolesResp(response.data)
				successf(obj)
			}catch(e){
				let err:Error={code:-1,msg:'response error'}
				errorf(err)
			}
		})
		.catch(function(error){
			if(error.response==undefined){
				errorf({code:-2,msg:error.message})
				return
			}
			let respdata=error.response.data
			let err:Error={code:-1,msg:''}
			if(respdata.code==undefined||typeof respdata.code!='number'||!Number.isInteger(respdata.code)||respdata.msg==undefined||typeof respdata.msg!='string'){
				err.msg=respdata
			}else{
				err.code=respdata.code
				err.msg=respdata.msg
			}
			errorf(err)
		})
	}
	//timeout must be integer,timeout's unit is millisecond
	//don't set Content-Type in header
	update_role(header: { [k: string]: string },req: UpdateRoleReq,timeout: number,errorf: (arg: Error)=>void,successf: (arg: UpdateRoleResp)=>void){
		if(!Number.isInteger(timeout)){
			errorf({code:-2,msg:'timeout must be integer'})
			return
		}
		if(header==null||header==undefined){
			header={}
		}
		header["Content-Type"] = "application/json"
		let body: string=''
		try{
			body=UpdateRoleReqToJson(req)
		}catch(e){
			errorf({code:-2,msg:e})
			return
		}
		let config={
			url:_WebPathUserUpdateRole,
			method: "post",
			baseURL: this.host,
			headers: header,
			data: body,
			timeout: timeout,
		}
		Axios.request(config)
		.then(function(response){
			try{
				let obj:UpdateRoleResp=JsonToUpdateRoleResp(response.data)
				successf(obj)
			}catch(e){
				let err:Error={code:-1,msg:'response error'}
				errorf(err)
			}
		})
		.catch(function(error){
			if(error.response==undefined){
				errorf({code:-2,msg:error.message})
				return
			}
			let respdata=error.response.data
			let err:Error={code:-1,msg:''}
			if(respdata.code==undefined||typeof respdata.code!='number'||!Number.isInteger(respdata.code)||respdata.msg==undefined||typeof respdata.msg!='string'){
				err.msg=respdata
			}else{
				err.code=respdata.code
				err.msg=respdata.msg
			}
			errorf(err)
		})
	}
	//timeout must be integer,timeout's unit is millisecond
	//don't set Content-Type in header
	del_roles(header: { [k: string]: string },req: DelRolesReq,timeout: number,errorf: (arg: Error)=>void,successf: (arg: DelRolesResp)=>void){
		if(!Number.isInteger(timeout)){
			errorf({code:-2,msg:'timeout must be integer'})
			return
		}
		if(header==null||header==undefined){
			header={}
		}
		header["Content-Type"] = "application/json"
		let body: string=''
		try{
			body=DelRolesReqToJson(req)
		}catch(e){
			errorf({code:-2,msg:e})
			return
		}
		let config={
			url:_WebPathUserDelRoles,
			method: "post",
			baseURL: this.host,
			headers: header,
			data: body,
			timeout: timeout,
		}
		Axios.request(config)
		.then(function(response){
			try{
				let obj:DelRolesResp=JsonToDelRolesResp(response.data)
				successf(obj)
			}catch(e){
				let err:Error={code:-1,msg:'response error'}
				errorf(err)
			}
		})
		.catch(function(error){
			if(error.response==undefined){
				errorf({code:-2,msg:error.message})
				return
			}
			let respdata=error.response.data
			let err:Error={code:-1,msg:''}
			if(respdata.code==undefined||typeof respdata.code!='number'||!Number.isInteger(respdata.code)||respdata.msg==undefined||typeof respdata.msg!='string'){
				err.msg=respdata
			}else{
				err.code=respdata.code
				err.msg=respdata.msg
			}
			errorf(err)
		})
	}
	//timeout must be integer,timeout's unit is millisecond
	//don't set Content-Type in header
	add_user_role(header: { [k: string]: string },req: AddUserRoleReq,timeout: number,errorf: (arg: Error)=>void,successf: (arg: AddUserRoleResp)=>void){
		if(!Number.isInteger(timeout)){
			errorf({code:-2,msg:'timeout must be integer'})
			return
		}
		if(header==null||header==undefined){
			header={}
		}
		header["Content-Type"] = "application/json"
		let body: string=''
		try{
			body=AddUserRoleReqToJson(req)
		}catch(e){
			errorf({code:-2,msg:e})
			return
		}
		let config={
			url:_WebPathUserAddUserRole,
			method: "post",
			baseURL: this.host,
			headers: header,
			data: body,
			timeout: timeout,
		}
		Axios.request(config)
		.then(function(response){
			try{
				let obj:AddUserRoleResp=JsonToAddUserRoleResp(response.data)
				successf(obj)
			}catch(e){
				let err:Error={code:-1,msg:'response error'}
				errorf(err)
			}
		})
		.catch(function(error){
			if(error.response==undefined){
				errorf({code:-2,msg:error.message})
				return
			}
			let respdata=error.response.data
			let err:Error={code:-1,msg:''}
			if(respdata.code==undefined||typeof respdata.code!='number'||!Number.isInteger(respdata.code)||respdata.msg==undefined||typeof respdata.msg!='string'){
				err.msg=respdata
			}else{
				err.code=respdata.code
				err.msg=respdata.msg
			}
			errorf(err)
		})
	}
	//timeout must be integer,timeout's unit is millisecond
	//don't set Content-Type in header
	del_user_role(header: { [k: string]: string },req: DelUserRoleReq,timeout: number,errorf: (arg: Error)=>void,successf: (arg: DelUserRoleResp)=>void){
		if(!Number.isInteger(timeout)){
			errorf({code:-2,msg:'timeout must be integer'})
			return
		}
		if(header==null||header==undefined){
			header={}
		}
		header["Content-Type"] = "application/json"
		let body: string=''
		try{
			body=DelUserRoleReqToJson(req)
		}catch(e){
			errorf({code:-2,msg:e})
			return
		}
		let config={
			url:_WebPathUserDelUserRole,
			method: "post",
			baseURL: this.host,
			headers: header,
			data: body,
			timeout: timeout,
		}
		Axios.request(config)
		.then(function(response){
			try{
				let obj:DelUserRoleResp=JsonToDelUserRoleResp(response.data)
				successf(obj)
			}catch(e){
				let err:Error={code:-1,msg:'response error'}
				errorf(err)
			}
		})
		.catch(function(error){
			if(error.response==undefined){
				errorf({code:-2,msg:error.message})
				return
			}
			let respdata=error.response.data
			let err:Error={code:-1,msg:''}
			if(respdata.code==undefined||typeof respdata.code!='number'||!Number.isInteger(respdata.code)||respdata.msg==undefined||typeof respdata.msg!='string'){
				err.msg=respdata
			}else{
				err.code=respdata.code
				err.msg=respdata.msg
			}
			errorf(err)
		})
	}
	private host: string
}
