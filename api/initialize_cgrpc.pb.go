// Code generated by protoc-gen-go-cgrpc. DO NOT EDIT.
// version:
// 	protoc-gen-go-cgrpc v0.0.1
// 	protoc              v3.21.1
// source: api/initialize.proto

package api

import (
	context "context"
	cgrpc "github.com/chenjie199234/Corelib/cgrpc"
	error1 "github.com/chenjie199234/Corelib/error"
	log "github.com/chenjie199234/Corelib/log"
	metadata "github.com/chenjie199234/Corelib/metadata"
)

var _CGrpcPathInitializeInitialize = "/admin.initialize/initialize"

type InitializeCGrpcClient interface {
	// 初始化
	Initialize(context.Context, *InitializeReq) (*InitializeResp, error)
}

type initializeCGrpcClient struct {
	cc *cgrpc.CGrpcClient
}

func NewInitializeCGrpcClient(c *cgrpc.CGrpcClient) InitializeCGrpcClient {
	return &initializeCGrpcClient{cc: c}
}

func (c *initializeCGrpcClient) Initialize(ctx context.Context, req *InitializeReq) (*InitializeResp, error) {
	if req == nil {
		return nil, error1.ErrReq
	}
	resp := new(InitializeResp)
	if e := c.cc.Call(ctx, _CGrpcPathInitializeInitialize, req, resp, metadata.GetMetadata(ctx)); e != nil {
		return nil, e
	}
	return resp, nil
}

type InitializeCGrpcServer interface {
	// 初始化
	Initialize(context.Context, *InitializeReq) (*InitializeResp, error)
}

func _Initialize_Initialize_CGrpcHandler(handler func(context.Context, *InitializeReq) (*InitializeResp, error)) cgrpc.OutsideHandler {
	return func(ctx *cgrpc.Context) {
		req := new(InitializeReq)
		if ctx.DecodeReq(req) != nil {
			ctx.Abort(error1.ErrReq)
			return
		}
		if errstr := req.Validate(); errstr != "" {
			log.Error(ctx, "[/admin.initialize/initialize]", errstr)
			ctx.Abort(error1.ErrReq)
			return
		}
		resp, e := handler(ctx, req)
		if e != nil {
			ctx.Abort(e)
			return
		}
		if resp == nil {
			resp = new(InitializeResp)
		}
		ctx.Write(resp)
	}
}
func RegisterInitializeCGrpcServer(engine *cgrpc.CGrpcServer, svc InitializeCGrpcServer, allmids map[string]cgrpc.OutsideHandler) {
	// avoid lint
	_ = allmids
	engine.RegisterHandler("admin.initialize", "initialize", _Initialize_Initialize_CGrpcHandler(svc.Initialize))
}
