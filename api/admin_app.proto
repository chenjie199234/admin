syntax="proto3";

//this is the proto package name,all proto in this project must use this name as the proto package name
package admin;
//this is the golang's package name,all proto in this project must use this name as the golang's package name
option go_package="github.com/chenjie199234/admin/api;api";
//https://github.com/chenjie199234/Corelib/blob/main/pbex/pbex.proto
import "pbex/pbex.proto";

//this is the proto file for app service
service app{
	//rpc example(examplereq)returns(exampleresp){
	//	option (pbex.method)="get";//can be set to get,delete,post,put,patch
	//	option (pbex.web_midwares)="b";
	//	option (pbex.web_midwares)="c";
	//	option (pbex.web_midwares)="a";//this function on web protocol has 3 midwares,it's order is b,c,a
	//	option (pbex.crpc_midwares)="b";
	//	option (pbex.crpc_midwares)="c";
	//	option (pbex.crpc_midwares)="a";//this function on crpc protocol has 3 midwares,it's order is b,c,a
	//	option (pbex.cgrpc_midwares)="b";
	//	option (pbex.cgrpc_midwares)="c";
	//	option (pbex.cgrpc_midwares)="a";//this function on grpc protocol has 3 midwares,it's order is b,c,a
	//}

	rpc get_app(get_app_req)returns(get_app_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	//app

	rpc set_app(set_app_req)returns(set_app_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
	rpc del_app(del_app_req)returns(del_app_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
	rpc update_app_secret(update_app_secret_req)returns(update_app_secret_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
	rpc del_key(del_key_req)returns(del_key_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
	rpc get_key_config(get_key_config_req)returns(get_key_config_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
	rpc set_key_config(set_key_config_req)returns(set_key_config_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
	rpc rollback(rollback_req)returns(rollback_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
	rpc watch_config(watch_config_req)returns(watch_config_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="accesskey";
	}
	rpc watch_discover(watch_discover_req)returns(watch_discover_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="accesskey";
	}

	//instance

	rpc get_instances(get_instances_req)returns(get_instances_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
	rpc get_instance_info(get_instance_info_req)returns(get_instance_info_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}

	//proxy

	rpc set_proxy(set_proxy_req)returns(set_proxy_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
	rpc del_proxy(del_proxy_req)returns(del_proxy_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
	rpc proxy(proxy_req)returns(proxy_resp){
		option (pbex.method)="post";
		option (pbex.web_midwares)="token";
	}
}

//req can be set with pbex extentions
//message examplereq{
	//int64 example_for_extentions=1[(pbex.int_gt)=1,(pbex.int_lt)=100];
//}
//resp's pbex extentions will be ignore
//message exampleresp{
	//int64 example_resp=1;
//}

message get_app_req{
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string g_name=2[(pbex.string_bytes_len_gt)=0];
	string a_name=3[(pbex.string_bytes_len_gt)=0];
	string secret=4[(pbex.string_bytes_len_lt)=32];
}
message get_app_resp{
	string discover_mode=1;//can be one of "kubernetes" / "dns" / "static"
	string kubernetes_namespace=2;//when discover_mode == "kubernetes"
	string kubernetes_labelselector=3;//when discover_mode == "kubernetes"
	string kubernetes_fieldselector=4;//when discover_mode == "kubernetes"
	string dns_host=5;//when discover_mode == "dns"
	uint32 dns_interval=6;//when discover_mode == "dns",unit second
	repeated string static_addrs=7;//when discover_mode == "static"
	uint32 crpc_port=8;
	uint32 cgrpc_port=9;
	uint32 web_port=10;
	map<string,key_config_info> keys=11;
	map<string,proxy_path_info> paths=12;
}
message proxy_path_info{
	repeated uint32 node_id=1;
	bool read=2;//need read permission on this node
	bool write=3;//need write permission on this node
	bool admin=4;//need admin permission on this node
}
message key_config_info{
	uint32 cur_index=1;
	uint32 max_index=2;
	uint32 cur_version=3;
	string cur_value=4;
	string cur_value_type=5;
}

//app

message set_app_req {
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string g_name=2[(pbex.string_bytes_len_gt)=0];
	string a_name=3[(pbex.string_bytes_len_gt)=0];
	string secret=4[(pbex.string_bytes_len_lt)=32];
	string discover_mode=5[(pbex.string_bytes_in)="kubernetes",(pbex.string_bytes_in)="dns",(pbex.string_bytes_in)="static"];
	string kubernetes_namespace=6;//when discover_mode == "kubernetes"
	string kubernetes_labelselector=7;//when discover_mode == "kubernetes"
	string kubernetes_fieldselector=8;//when discover_mode == "kubernetes"
	string dns_host=9;//when discover_mode == "dns"
	uint32 dns_interval=10;//when discover_mode == "dns",unit second
	repeated string static_addrs=11;//when discover_mode == "static"
	uint32 crpc_port=12[(pbex.uint_gt)=0,(pbex.uint_lt)=65536];
	uint32 cgrpc_port=13[(pbex.uint_gt)=0,(pbex.uint_lt)=65536];
	uint32 web_port=14[(pbex.uint_gt)=0,(pbex.uint_lt)=65536];
	bool new_app=15;//true: create a new app. false: update the already exist app
}
message set_app_resp {
	repeated uint32 node_id=1;
}
message del_app_req {
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string g_name=2[(pbex.string_bytes_len_gt)=0];
	string a_name=3[(pbex.string_bytes_len_gt)=0];
	string secret=4[(pbex.string_bytes_len_lt)=32];
}
message del_app_resp {
}
message update_app_secret_req {
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string g_name=2[(pbex.string_bytes_len_gt)=0];
	string a_name=3[(pbex.string_bytes_len_gt)=0];
	string old_secret=4[(pbex.string_bytes_len_lt)=32];
	string new_secret=5[(pbex.string_bytes_len_lt)=32];
}
message update_app_secret_resp{
}
message del_key_req {
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string g_name=2[(pbex.string_bytes_len_gt)=0];
	string a_name=3[(pbex.string_bytes_len_gt)=0];
	string key=4[(pbex.string_bytes_len_gt)=0];//can't contain '.' in key
	string secret=5[(pbex.string_bytes_len_lt)=32];
}
message del_key_resp {
}
message get_key_config_req {
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string g_name=2[(pbex.string_bytes_len_gt)=0];
	string a_name=3[(pbex.string_bytes_len_gt)=0];
	string key=4[(pbex.string_bytes_len_gt)=0];//can't contain '.' in key
	uint32 index=5;//0 means return current active config,config's index start from 1
	string secret=6[(pbex.string_bytes_len_lt)=32];
}
message get_key_config_resp {
	uint32 cur_index=1;//current active config index,0 means not exist
	uint32 max_index=2;//current max config index,0 means not exist
	uint32 cur_version=3;//current active config version,config's version start from 1
	uint32 this_index=4;//the config data below belong's to which index
	string value=5;
	string value_type=6;
}
message set_key_config_req {
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string g_name=2[(pbex.string_bytes_len_gt)=0];
	string a_name=3[(pbex.string_bytes_len_gt)=0];
	string key=4[(pbex.string_bytes_len_gt)=0];//can't contain '.' in key
	string value=5[(pbex.string_bytes_len_gt)=0];
	string value_type=6[(pbex.string_bytes_in)="raw",
		(pbex.string_bytes_in)="json",
		(pbex.string_bytes_in)="yaml",
		(pbex.string_bytes_in)="toml"];
	string secret=7[(pbex.string_bytes_len_lt)=32];
	bool new_key=8;//true: create a new key config. false: update the already exist key config
}
message set_key_config_resp {
}
message rollback_req{
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string g_name=2[(pbex.string_bytes_len_gt)=0];
	string a_name=3[(pbex.string_bytes_len_gt)=0];
	string key=4[(pbex.string_bytes_len_gt)=0];//can't contain '.' in key
	string secret=5[(pbex.string_bytes_len_lt)=32];
	uint32 index=6[(pbex.uint_gt)=0];
}
message rollback_resp{
}
message watch_config_req{
	string project_name=1[(pbex.string_bytes_len_gt)=0];
	string g_name=2[(pbex.string_bytes_len_gt)=0];
	string a_name=3[(pbex.string_bytes_len_gt)=0];
	//map's key is config's keyname,map's value is config's cur version
	//if cur version == 0 means return current active config
	//if all cur version is the newest,the request will block until a new version come
	//if some keys' version is the newest,and some keys' version is old,then the keys with old version will return newest version and datas,the newest's keys will only return version
	map<string,uint32> keys=4[(pbex.map_repeated_len_gt)=0];//can't contain '.' in key
}
message watch_config_resp{
	map<string,watch_data> datas=1;
}
message watch_data{
	string key=1;
	string value=2;
	string value_type=3;
	uint32 version=4;
}
message watch_discover_req{
	string project_name=1[(pbex.string_bytes_len_gt)=0];
	string g_name=2[(pbex.string_bytes_len_gt)=0];
	string a_name=3[(pbex.string_bytes_len_gt)=0];
	string cur_discover_mode=4[(pbex.string_bytes_in)="kubernetes",(pbex.string_bytes_in)="dns",(pbex.string_bytes_in)="static",(pbex.string_bytes_in)=""];
	string cur_dns_host=5;//when discover_mode == "dns"
	uint32 cur_dns_interval=6;//when cur_discover_mode == "dns",unit second
	repeated string cur_static_addrs=7;//when cur_discover_mode == "static"
	string cur_kubernetes_namespace=8;//when cur_discover_mode == "kubernetes"
	string cur_kubernetes_labelselector=9;//when cur_discover_mode == "kubernetes"
	string cur_kubernetes_fieldselector=10;//when cur_discover_mode == "kubernetes"
	uint32 cur_crpc_port=11[(pbex.uint_lt)=65536];
	uint32 cur_cgrpc_port=12[(pbex.uint_lt)=65536];
	uint32 cur_web_port=13[(pbex.uint_lt)=65536];
}
message watch_discover_resp{
	string discover_mode=1;
	string dns_host=2;//when discover_mode == "dns"
	uint32 dns_interval=3;//when discover_mode == "dns"
	repeated string static_addrs=4;//when discover_mode == "static"
	string kubernetes_namespace=5;//when discover_mode == "kubernetes"
	string kubernetes_labelselector=6;//when discover_mode == "kubernetes"
	string kubernetes_fieldselector=7;//when discover_mode == "kubernetes"
	uint32 crpc_port=8[(pbex.uint_lt)=65536];
	uint32 cgrpc_port=9[(pbex.uint_lt)=65536];
	uint32 web_port=10[(pbex.uint_lt)=65536];
}

//instance
message instance_info{
	string name=1;
	uint64 total_mem=2;
	uint64 cur_mem_usage=3;
	double cpu_num=4;
	double cur_cpu_usage=5;
}
message get_instances_req{
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string g_name=2[(pbex.string_bytes_len_not_eq)=0];
	string a_name=3[(pbex.string_bytes_len_not_eq)=0];
	string secret=4;
	bool with_info=5;
}
message get_instances_resp{
	map<string,instance_info> instances=1;//key addr,value info,if with_info is false,value is empty
}
message get_instance_info_req{
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string g_name=2[(pbex.string_bytes_len_not_eq)=0];
	string a_name=3[(pbex.string_bytes_len_not_eq)=0];
	string secret=4;
	string addr=5[(pbex.string_bytes_len_gt)=0];
}
message get_instance_info_resp{
	instance_info info=1;
}

//proxy

message set_proxy_req{
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string g_name=2[(pbex.string_bytes_len_not_eq)=0];
	string a_name=3[(pbex.string_bytes_len_not_eq)=0];
	string path=4[(pbex.string_bytes_len_not_eq)=0];
	bool read=5;//need read permission on this node
	bool write=6;//need write permission on this node
	bool admin=7;//need admin permission on this node
	string secret=8[(pbex.string_bytes_len_lt)=32];
	bool new_path=9;//true: create a new proxy path config. false: update the already exist proxy path setting
}
message set_proxy_resp{
	repeated uint32 node_id=1;
}
message del_proxy_req{
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string g_name=2[(pbex.string_bytes_len_not_eq)=0];
	string a_name=3[(pbex.string_bytes_len_not_eq)=0];
	string path=4[(pbex.string_bytes_len_not_eq)=0];
	string secret=5[(pbex.string_bytes_len_lt)=32];
}
message del_proxy_resp{
}
message proxy_req{
	repeated uint32 project_id=1[(pbex.map_repeated_len_eq)=2];
	string g_name=2[(pbex.string_bytes_len_not_eq)=0];
	string a_name=3[(pbex.string_bytes_len_not_eq)=0];
	string path=4[(pbex.string_bytes_len_not_eq)=0];
	string data=5[(pbex.string_bytes_len_gte)=2];
	string force_addr=6;
}
message proxy_resp{
	string data=1;
}
